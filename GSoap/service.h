/* service.h
   Generated by wsdl2h 2.8.17r from http://kadplayer.com:81/kadservice.asmx?wsdl and typemap.dat
   2014-05-16 15:46:13 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2013 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on service.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following licenses:
GPL or Genivia's license for commercial use.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://tempuri.org/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/"
//gsoap ns1   schema namespace:	http://tempuri.org/
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class ns1__UserSetting.
class ns1__UserSetting;

//  Forward declaration of class _ns1__GetSystemNotify.
class _ns1__GetSystemNotify;

//  Forward declaration of class _ns1__GetSystemNotifyResponse.
class _ns1__GetSystemNotifyResponse;

//  Forward declaration of class _ns1__GetSystemMessage.
class _ns1__GetSystemMessage;

//  Forward declaration of class _ns1__GetSystemMessageResponse.
class _ns1__GetSystemMessageResponse;

//  Forward declaration of class _ns1__GetUserSetting.
class _ns1__GetUserSetting;

//  Forward declaration of class _ns1__GetUserSettingResponse.
class _ns1__GetUserSettingResponse;

//  Forward declaration of class _ns1__GetSensitiveWords.
class _ns1__GetSensitiveWords;

//  Forward declaration of class _ns1__GetSensitiveWordsResponse.
class _ns1__GetSensitiveWordsResponse;

//  Forward declaration of class _ns1__GetHotWords.
class _ns1__GetHotWords;

//  Forward declaration of class _ns1__GetHotWordsResponse.
class _ns1__GetHotWordsResponse;

//  Forward declaration of class _ns1__GetHotEd2ks.
class _ns1__GetHotEd2ks;

//  Forward declaration of class _ns1__GetHotEd2ksResponse.
class _ns1__GetHotEd2ksResponse;

//  Forward declaration of class _ns1__GetRandomWord.
class _ns1__GetRandomWord;

//  Forward declaration of class _ns1__GetRandomWordResponse.
class _ns1__GetRandomWordResponse;

//  Forward declaration of class _ns1__SetSearchLog.
class _ns1__SetSearchLog;

//  Forward declaration of class _ns1__SetSearchLogResponse.
class _ns1__SetSearchLogResponse;

//  Forward declaration of class _ns1__SetFeedback.
class _ns1__SetFeedback;

//  Forward declaration of class _ns1__SetFeedbackResponse.
class _ns1__SetFeedbackResponse;

//  Forward declaration of class _ns1__SetPlayLog.
class _ns1__SetPlayLog;

//  Forward declaration of class _ns1__SetPlayLogResponse.
class _ns1__SetPlayLogResponse;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/// "http://tempuri.org/":UserSetting is a complexType.
/// class ns1__UserSetting operations:
/// - soap_new_ns1__UserSetting(soap*) allocate
/// - soap_new_ns1__UserSetting(soap*, int num) allocate array
/// - soap_new_req_ns1__UserSetting(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__UserSetting(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__UserSetting(soap*, ns1__UserSetting*) deserialize from a stream
/// - int soap_write_ns1__UserSetting(soap, ns1__UserSetting*) serialize to a stream
class ns1__UserSetting
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetSystemNotify

/// "http://tempuri.org/":GetSystemNotify is a complexType.
/// class _ns1__GetSystemNotify operations:
/// - soap_new__ns1__GetSystemNotify(soap*) allocate
/// - soap_new__ns1__GetSystemNotify(soap*, int num) allocate array
/// - soap_new_req__ns1__GetSystemNotify(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetSystemNotify(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetSystemNotify(soap*, _ns1__GetSystemNotify*) deserialize from a stream
/// - int soap_write__ns1__GetSystemNotify(soap, _ns1__GetSystemNotify*) serialize to a stream
class _ns1__GetSystemNotify
{ public:
/// Element mac of type xs:string.
    std::string*                         mac                            0;	///< Optional element.
/// Element version of type xs:string.
    std::string*                         version                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetSystemNotifyResponse

/// "http://tempuri.org/":GetSystemNotifyResponse is a complexType.
/// class _ns1__GetSystemNotifyResponse operations:
/// - soap_new__ns1__GetSystemNotifyResponse(soap*) allocate
/// - soap_new__ns1__GetSystemNotifyResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__GetSystemNotifyResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetSystemNotifyResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetSystemNotifyResponse(soap*, _ns1__GetSystemNotifyResponse*) deserialize from a stream
/// - int soap_write__ns1__GetSystemNotifyResponse(soap, _ns1__GetSystemNotifyResponse*) serialize to a stream
class _ns1__GetSystemNotifyResponse
{ public:
/// Element GetSystemNotifyResult of type xs:string.
    std::string*                         GetSystemNotifyResult          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetSystemMessage

/// "http://tempuri.org/":GetSystemMessage is a complexType.
/// class _ns1__GetSystemMessage operations:
/// - soap_new__ns1__GetSystemMessage(soap*) allocate
/// - soap_new__ns1__GetSystemMessage(soap*, int num) allocate array
/// - soap_new_req__ns1__GetSystemMessage(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetSystemMessage(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetSystemMessage(soap*, _ns1__GetSystemMessage*) deserialize from a stream
/// - int soap_write__ns1__GetSystemMessage(soap, _ns1__GetSystemMessage*) serialize to a stream
class _ns1__GetSystemMessage
{ public:
/// Element mac of type xs:string.
    std::string*                         mac                            0;	///< Optional element.
/// Element version of type xs:string.
    std::string*                         version                        0;	///< Optional element.
/// Element extension of type xs:string.
    std::string*                         extension                      0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetSystemMessageResponse

/// "http://tempuri.org/":GetSystemMessageResponse is a complexType.
/// class _ns1__GetSystemMessageResponse operations:
/// - soap_new__ns1__GetSystemMessageResponse(soap*) allocate
/// - soap_new__ns1__GetSystemMessageResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__GetSystemMessageResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetSystemMessageResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetSystemMessageResponse(soap*, _ns1__GetSystemMessageResponse*) deserialize from a stream
/// - int soap_write__ns1__GetSystemMessageResponse(soap, _ns1__GetSystemMessageResponse*) serialize to a stream
class _ns1__GetSystemMessageResponse
{ public:
/// Element GetSystemMessageResult of type xs:string.
    std::string*                         GetSystemMessageResult         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetUserSetting

/// "http://tempuri.org/":GetUserSetting is a complexType.
/// class _ns1__GetUserSetting operations:
/// - soap_new__ns1__GetUserSetting(soap*) allocate
/// - soap_new__ns1__GetUserSetting(soap*, int num) allocate array
/// - soap_new_req__ns1__GetUserSetting(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetUserSetting(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetUserSetting(soap*, _ns1__GetUserSetting*) deserialize from a stream
/// - int soap_write__ns1__GetUserSetting(soap, _ns1__GetUserSetting*) serialize to a stream
class _ns1__GetUserSetting
{ public:
/// Element mac of type xs:string.
    std::string*                         mac                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetUserSettingResponse

/// "http://tempuri.org/":GetUserSettingResponse is a complexType.
/// class _ns1__GetUserSettingResponse operations:
/// - soap_new__ns1__GetUserSettingResponse(soap*) allocate
/// - soap_new__ns1__GetUserSettingResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__GetUserSettingResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetUserSettingResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetUserSettingResponse(soap*, _ns1__GetUserSettingResponse*) deserialize from a stream
/// - int soap_write__ns1__GetUserSettingResponse(soap, _ns1__GetUserSettingResponse*) serialize to a stream
class _ns1__GetUserSettingResponse
{ public:
/// Element GetUserSettingResult of type "http://tempuri.org/":UserSetting.
    ns1__UserSetting*                    GetUserSettingResult           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetSensitiveWords

/// "http://tempuri.org/":GetSensitiveWords is a complexType.
/// class _ns1__GetSensitiveWords operations:
/// - soap_new__ns1__GetSensitiveWords(soap*) allocate
/// - soap_new__ns1__GetSensitiveWords(soap*, int num) allocate array
/// - soap_new_req__ns1__GetSensitiveWords(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetSensitiveWords(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetSensitiveWords(soap*, _ns1__GetSensitiveWords*) deserialize from a stream
/// - int soap_write__ns1__GetSensitiveWords(soap, _ns1__GetSensitiveWords*) serialize to a stream
class _ns1__GetSensitiveWords
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetSensitiveWordsResponse

/// "http://tempuri.org/":GetSensitiveWordsResponse is a complexType.
/// class _ns1__GetSensitiveWordsResponse operations:
/// - soap_new__ns1__GetSensitiveWordsResponse(soap*) allocate
/// - soap_new__ns1__GetSensitiveWordsResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__GetSensitiveWordsResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetSensitiveWordsResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetSensitiveWordsResponse(soap*, _ns1__GetSensitiveWordsResponse*) deserialize from a stream
/// - int soap_write__ns1__GetSensitiveWordsResponse(soap, _ns1__GetSensitiveWordsResponse*) serialize to a stream
class _ns1__GetSensitiveWordsResponse
{ public:
/// Element GetSensitiveWordsResult of type xs:string.
    std::string*                         GetSensitiveWordsResult        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetHotWords

/// "http://tempuri.org/":GetHotWords is a complexType.
/// class _ns1__GetHotWords operations:
/// - soap_new__ns1__GetHotWords(soap*) allocate
/// - soap_new__ns1__GetHotWords(soap*, int num) allocate array
/// - soap_new_req__ns1__GetHotWords(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetHotWords(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetHotWords(soap*, _ns1__GetHotWords*) deserialize from a stream
/// - int soap_write__ns1__GetHotWords(soap, _ns1__GetHotWords*) serialize to a stream
class _ns1__GetHotWords
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetHotWordsResponse

/// "http://tempuri.org/":GetHotWordsResponse is a complexType.
/// class _ns1__GetHotWordsResponse operations:
/// - soap_new__ns1__GetHotWordsResponse(soap*) allocate
/// - soap_new__ns1__GetHotWordsResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__GetHotWordsResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetHotWordsResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetHotWordsResponse(soap*, _ns1__GetHotWordsResponse*) deserialize from a stream
/// - int soap_write__ns1__GetHotWordsResponse(soap, _ns1__GetHotWordsResponse*) serialize to a stream
class _ns1__GetHotWordsResponse
{ public:
/// Element GetHotWordsResult of type xs:string.
    std::string*                         GetHotWordsResult              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetHotEd2ks

/// "http://tempuri.org/":GetHotEd2ks is a complexType.
/// class _ns1__GetHotEd2ks operations:
/// - soap_new__ns1__GetHotEd2ks(soap*) allocate
/// - soap_new__ns1__GetHotEd2ks(soap*, int num) allocate array
/// - soap_new_req__ns1__GetHotEd2ks(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetHotEd2ks(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetHotEd2ks(soap*, _ns1__GetHotEd2ks*) deserialize from a stream
/// - int soap_write__ns1__GetHotEd2ks(soap, _ns1__GetHotEd2ks*) serialize to a stream
class _ns1__GetHotEd2ks
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetHotEd2ksResponse

/// "http://tempuri.org/":GetHotEd2ksResponse is a complexType.
/// class _ns1__GetHotEd2ksResponse operations:
/// - soap_new__ns1__GetHotEd2ksResponse(soap*) allocate
/// - soap_new__ns1__GetHotEd2ksResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__GetHotEd2ksResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetHotEd2ksResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetHotEd2ksResponse(soap*, _ns1__GetHotEd2ksResponse*) deserialize from a stream
/// - int soap_write__ns1__GetHotEd2ksResponse(soap, _ns1__GetHotEd2ksResponse*) serialize to a stream
class _ns1__GetHotEd2ksResponse
{ public:
/// Element GetHotEd2ksResult of type xs:string.
    std::string*                         GetHotEd2ksResult              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetRandomWord

/// "http://tempuri.org/":GetRandomWord is a complexType.
/// class _ns1__GetRandomWord operations:
/// - soap_new__ns1__GetRandomWord(soap*) allocate
/// - soap_new__ns1__GetRandomWord(soap*, int num) allocate array
/// - soap_new_req__ns1__GetRandomWord(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetRandomWord(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetRandomWord(soap*, _ns1__GetRandomWord*) deserialize from a stream
/// - int soap_write__ns1__GetRandomWord(soap, _ns1__GetRandomWord*) serialize to a stream
class _ns1__GetRandomWord
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetRandomWordResponse

/// "http://tempuri.org/":GetRandomWordResponse is a complexType.
/// class _ns1__GetRandomWordResponse operations:
/// - soap_new__ns1__GetRandomWordResponse(soap*) allocate
/// - soap_new__ns1__GetRandomWordResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__GetRandomWordResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetRandomWordResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetRandomWordResponse(soap*, _ns1__GetRandomWordResponse*) deserialize from a stream
/// - int soap_write__ns1__GetRandomWordResponse(soap, _ns1__GetRandomWordResponse*) serialize to a stream
class _ns1__GetRandomWordResponse
{ public:
/// Element GetRandomWordResult of type xs:string.
    std::string*                         GetRandomWordResult            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetSearchLog

/// "http://tempuri.org/":SetSearchLog is a complexType.
/// class _ns1__SetSearchLog operations:
/// - soap_new__ns1__SetSearchLog(soap*) allocate
/// - soap_new__ns1__SetSearchLog(soap*, int num) allocate array
/// - soap_new_req__ns1__SetSearchLog(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__SetSearchLog(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__SetSearchLog(soap*, _ns1__SetSearchLog*) deserialize from a stream
/// - int soap_write__ns1__SetSearchLog(soap, _ns1__SetSearchLog*) serialize to a stream
class _ns1__SetSearchLog
{ public:
/// Element mac of type xs:string.
    std::string*                         mac                            0;	///< Optional element.
/// Element keys of type xs:string.
    std::string*                         keys                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetSearchLogResponse

/// "http://tempuri.org/":SetSearchLogResponse is a complexType.
/// class _ns1__SetSearchLogResponse operations:
/// - soap_new__ns1__SetSearchLogResponse(soap*) allocate
/// - soap_new__ns1__SetSearchLogResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__SetSearchLogResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__SetSearchLogResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__SetSearchLogResponse(soap*, _ns1__SetSearchLogResponse*) deserialize from a stream
/// - int soap_write__ns1__SetSearchLogResponse(soap, _ns1__SetSearchLogResponse*) serialize to a stream
class _ns1__SetSearchLogResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetFeedback

/// "http://tempuri.org/":SetFeedback is a complexType.
/// class _ns1__SetFeedback operations:
/// - soap_new__ns1__SetFeedback(soap*) allocate
/// - soap_new__ns1__SetFeedback(soap*, int num) allocate array
/// - soap_new_req__ns1__SetFeedback(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__SetFeedback(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__SetFeedback(soap*, _ns1__SetFeedback*) deserialize from a stream
/// - int soap_write__ns1__SetFeedback(soap, _ns1__SetFeedback*) serialize to a stream
class _ns1__SetFeedback
{ public:
/// Element mac of type xs:string.
    std::string*                         mac                            0;	///< Optional element.
/// Element version of type xs:string.
    std::string*                         version                        0;	///< Optional element.
/// Element type of type xs:int.
    int                                  type                           1;	///< Required element.
/// Element content of type xs:string.
    std::string*                         content                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetFeedbackResponse

/// "http://tempuri.org/":SetFeedbackResponse is a complexType.
/// class _ns1__SetFeedbackResponse operations:
/// - soap_new__ns1__SetFeedbackResponse(soap*) allocate
/// - soap_new__ns1__SetFeedbackResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__SetFeedbackResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__SetFeedbackResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__SetFeedbackResponse(soap*, _ns1__SetFeedbackResponse*) deserialize from a stream
/// - int soap_write__ns1__SetFeedbackResponse(soap, _ns1__SetFeedbackResponse*) serialize to a stream
class _ns1__SetFeedbackResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetPlayLog

/// "http://tempuri.org/":SetPlayLog is a complexType.
/// class _ns1__SetPlayLog operations:
/// - soap_new__ns1__SetPlayLog(soap*) allocate
/// - soap_new__ns1__SetPlayLog(soap*, int num) allocate array
/// - soap_new_req__ns1__SetPlayLog(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__SetPlayLog(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__SetPlayLog(soap*, _ns1__SetPlayLog*) deserialize from a stream
/// - int soap_write__ns1__SetPlayLog(soap, _ns1__SetPlayLog*) serialize to a stream
class _ns1__SetPlayLog
{ public:
/// Element mac of type xs:string.
    std::string*                         mac                            0;	///< Optional element.
/// Element links of type xs:string.
    std::string*                         links                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetPlayLogResponse

/// "http://tempuri.org/":SetPlayLogResponse is a complexType.
/// class _ns1__SetPlayLogResponse operations:
/// - soap_new__ns1__SetPlayLogResponse(soap*) allocate
/// - soap_new__ns1__SetPlayLogResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__SetPlayLogResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__SetPlayLogResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__SetPlayLogResponse(soap*, _ns1__SetPlayLogResponse*) deserialize from a stream
/// - int soap_write__ns1__SetPlayLogResponse(soap, _ns1__SetPlayLogResponse*) serialize to a stream
class _ns1__SetPlayLogResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap ns1  service name:	KadServiceSoap 
//gsoap ns1  service type:	KadServiceSoap 
//gsoap ns1  service port:	http://kadplayer.com:81/kadservice.asmx 
//gsoap ns1  service namespace:	http://tempuri.org/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref KadServiceSoap

@section Service_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page KadServiceSoap Binding "KadServiceSoap"

@section KadServiceSoap_operations Operations of Binding  "KadServiceSoap"

  - @ref __ns1__GetSystemNotify

  - @ref __ns1__GetSystemMessage

  - @ref __ns1__GetUserSetting

  - @ref __ns1__GetSensitiveWords

  - @ref __ns1__GetHotWords

  - @ref __ns1__GetHotEd2ks

  - @ref __ns1__GetRandomWord

  - @ref __ns1__SetSearchLog

  - @ref __ns1__SetFeedback

  - @ref __ns1__SetPlayLog

  - @ref __ns1__GetSystemNotify_

  - @ref __ns1__GetSystemMessage_

  - @ref __ns1__GetUserSetting_

  - @ref __ns1__GetSensitiveWords_

  - @ref __ns1__GetHotWords_

  - @ref __ns1__GetHotEd2ks_

  - @ref __ns1__GetRandomWord_

  - @ref __ns1__SetSearchLog_

  - @ref __ns1__SetFeedback_

  - @ref __ns1__SetPlayLog_

@section KadServiceSoap_ports Endpoints of Binding  "KadServiceSoap"

  - http://kadplayer.com:81/kadservice.asmx

Note: use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   KadServiceSoap                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetSystemNotify                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetSystemNotify" of service binding "KadServiceSoap"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/GetSystemNotify"

  - Addressing input action: "http://tempuri.org/GetSystemNotify"

  - Addressing output action: "http://tempuri.org/GetSystemNotifyResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetSystemNotify(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetSystemNotify*              ns1__GetSystemNotify,
    // output parameters:
    _ns1__GetSystemNotifyResponse*      ns1__GetSystemNotifyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetSystemNotify(
    struct soap *soap,
    // input parameters:
    _ns1__GetSystemNotify*              ns1__GetSystemNotify,
    // output parameters:
    _ns1__GetSystemNotifyResponse*      ns1__GetSystemNotifyResponse
  );
@endcode

C++ proxy class (defined in soapKadServiceSoapProxy.h):
@code
  class KadServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapKadServiceSoapService.h):
@code
  class KadServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetSystemNotify SOAP
//gsoap ns1  service method-style:	GetSystemNotify document
//gsoap ns1  service method-encoding:	GetSystemNotify literal
//gsoap ns1  service method-input-action:	GetSystemNotify http://tempuri.org/GetSystemNotify
//gsoap ns1  service method-output-action:	GetSystemNotify http://tempuri.org/GetSystemNotifyResponse
int __ns1__GetSystemNotify(
    _ns1__GetSystemNotify*              ns1__GetSystemNotify,	///< Input parameter
    _ns1__GetSystemNotifyResponse*      ns1__GetSystemNotifyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetSystemMessage                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetSystemMessage" of service binding "KadServiceSoap"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/GetSystemMessage"

  - Addressing input action: "http://tempuri.org/GetSystemMessage"

  - Addressing output action: "http://tempuri.org/GetSystemMessageResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetSystemMessage(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetSystemMessage*             ns1__GetSystemMessage,
    // output parameters:
    _ns1__GetSystemMessageResponse*     ns1__GetSystemMessageResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetSystemMessage(
    struct soap *soap,
    // input parameters:
    _ns1__GetSystemMessage*             ns1__GetSystemMessage,
    // output parameters:
    _ns1__GetSystemMessageResponse*     ns1__GetSystemMessageResponse
  );
@endcode

C++ proxy class (defined in soapKadServiceSoapProxy.h):
@code
  class KadServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapKadServiceSoapService.h):
@code
  class KadServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetSystemMessage SOAP
//gsoap ns1  service method-style:	GetSystemMessage document
//gsoap ns1  service method-encoding:	GetSystemMessage literal
//gsoap ns1  service method-input-action:	GetSystemMessage http://tempuri.org/GetSystemMessage
//gsoap ns1  service method-output-action:	GetSystemMessage http://tempuri.org/GetSystemMessageResponse
int __ns1__GetSystemMessage(
    _ns1__GetSystemMessage*             ns1__GetSystemMessage,	///< Input parameter
    _ns1__GetSystemMessageResponse*     ns1__GetSystemMessageResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetUserSetting                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetUserSetting" of service binding "KadServiceSoap"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/GetUserSetting"

  - Addressing input action: "http://tempuri.org/GetUserSetting"

  - Addressing output action: "http://tempuri.org/GetUserSettingResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetUserSetting(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetUserSetting*               ns1__GetUserSetting,
    // output parameters:
    _ns1__GetUserSettingResponse*       ns1__GetUserSettingResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetUserSetting(
    struct soap *soap,
    // input parameters:
    _ns1__GetUserSetting*               ns1__GetUserSetting,
    // output parameters:
    _ns1__GetUserSettingResponse*       ns1__GetUserSettingResponse
  );
@endcode

C++ proxy class (defined in soapKadServiceSoapProxy.h):
@code
  class KadServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapKadServiceSoapService.h):
@code
  class KadServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetUserSetting SOAP
//gsoap ns1  service method-style:	GetUserSetting document
//gsoap ns1  service method-encoding:	GetUserSetting literal
//gsoap ns1  service method-input-action:	GetUserSetting http://tempuri.org/GetUserSetting
//gsoap ns1  service method-output-action:	GetUserSetting http://tempuri.org/GetUserSettingResponse
int __ns1__GetUserSetting(
    _ns1__GetUserSetting*               ns1__GetUserSetting,	///< Input parameter
    _ns1__GetUserSettingResponse*       ns1__GetUserSettingResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetSensitiveWords                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetSensitiveWords" of service binding "KadServiceSoap"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/GetSensitiveWords"

  - Addressing input action: "http://tempuri.org/GetSensitiveWords"

  - Addressing output action: "http://tempuri.org/GetSensitiveWordsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetSensitiveWords(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetSensitiveWords*            ns1__GetSensitiveWords,
    // output parameters:
    _ns1__GetSensitiveWordsResponse*    ns1__GetSensitiveWordsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetSensitiveWords(
    struct soap *soap,
    // input parameters:
    _ns1__GetSensitiveWords*            ns1__GetSensitiveWords,
    // output parameters:
    _ns1__GetSensitiveWordsResponse*    ns1__GetSensitiveWordsResponse
  );
@endcode

C++ proxy class (defined in soapKadServiceSoapProxy.h):
@code
  class KadServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapKadServiceSoapService.h):
@code
  class KadServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetSensitiveWords SOAP
//gsoap ns1  service method-style:	GetSensitiveWords document
//gsoap ns1  service method-encoding:	GetSensitiveWords literal
//gsoap ns1  service method-input-action:	GetSensitiveWords http://tempuri.org/GetSensitiveWords
//gsoap ns1  service method-output-action:	GetSensitiveWords http://tempuri.org/GetSensitiveWordsResponse
int __ns1__GetSensitiveWords(
    _ns1__GetSensitiveWords*            ns1__GetSensitiveWords,	///< Input parameter
    _ns1__GetSensitiveWordsResponse*    ns1__GetSensitiveWordsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetHotWords                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetHotWords" of service binding "KadServiceSoap"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/GetHotWords"

  - Addressing input action: "http://tempuri.org/GetHotWords"

  - Addressing output action: "http://tempuri.org/GetHotWordsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetHotWords(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetHotWords*                  ns1__GetHotWords,
    // output parameters:
    _ns1__GetHotWordsResponse*          ns1__GetHotWordsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetHotWords(
    struct soap *soap,
    // input parameters:
    _ns1__GetHotWords*                  ns1__GetHotWords,
    // output parameters:
    _ns1__GetHotWordsResponse*          ns1__GetHotWordsResponse
  );
@endcode

C++ proxy class (defined in soapKadServiceSoapProxy.h):
@code
  class KadServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapKadServiceSoapService.h):
@code
  class KadServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetHotWords SOAP
//gsoap ns1  service method-style:	GetHotWords document
//gsoap ns1  service method-encoding:	GetHotWords literal
//gsoap ns1  service method-input-action:	GetHotWords http://tempuri.org/GetHotWords
//gsoap ns1  service method-output-action:	GetHotWords http://tempuri.org/GetHotWordsResponse
int __ns1__GetHotWords(
    _ns1__GetHotWords*                  ns1__GetHotWords,	///< Input parameter
    _ns1__GetHotWordsResponse*          ns1__GetHotWordsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetHotEd2ks                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetHotEd2ks" of service binding "KadServiceSoap"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/GetHotEd2ks"

  - Addressing input action: "http://tempuri.org/GetHotEd2ks"

  - Addressing output action: "http://tempuri.org/GetHotEd2ksResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetHotEd2ks(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetHotEd2ks*                  ns1__GetHotEd2ks,
    // output parameters:
    _ns1__GetHotEd2ksResponse*          ns1__GetHotEd2ksResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetHotEd2ks(
    struct soap *soap,
    // input parameters:
    _ns1__GetHotEd2ks*                  ns1__GetHotEd2ks,
    // output parameters:
    _ns1__GetHotEd2ksResponse*          ns1__GetHotEd2ksResponse
  );
@endcode

C++ proxy class (defined in soapKadServiceSoapProxy.h):
@code
  class KadServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapKadServiceSoapService.h):
@code
  class KadServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetHotEd2ks SOAP
//gsoap ns1  service method-style:	GetHotEd2ks document
//gsoap ns1  service method-encoding:	GetHotEd2ks literal
//gsoap ns1  service method-input-action:	GetHotEd2ks http://tempuri.org/GetHotEd2ks
//gsoap ns1  service method-output-action:	GetHotEd2ks http://tempuri.org/GetHotEd2ksResponse
int __ns1__GetHotEd2ks(
    _ns1__GetHotEd2ks*                  ns1__GetHotEd2ks,	///< Input parameter
    _ns1__GetHotEd2ksResponse*          ns1__GetHotEd2ksResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetRandomWord                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetRandomWord" of service binding "KadServiceSoap"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/GetRandomWord"

  - Addressing input action: "http://tempuri.org/GetRandomWord"

  - Addressing output action: "http://tempuri.org/GetRandomWordResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetRandomWord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetRandomWord*                ns1__GetRandomWord,
    // output parameters:
    _ns1__GetRandomWordResponse*        ns1__GetRandomWordResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetRandomWord(
    struct soap *soap,
    // input parameters:
    _ns1__GetRandomWord*                ns1__GetRandomWord,
    // output parameters:
    _ns1__GetRandomWordResponse*        ns1__GetRandomWordResponse
  );
@endcode

C++ proxy class (defined in soapKadServiceSoapProxy.h):
@code
  class KadServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapKadServiceSoapService.h):
@code
  class KadServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetRandomWord SOAP
//gsoap ns1  service method-style:	GetRandomWord document
//gsoap ns1  service method-encoding:	GetRandomWord literal
//gsoap ns1  service method-input-action:	GetRandomWord http://tempuri.org/GetRandomWord
//gsoap ns1  service method-output-action:	GetRandomWord http://tempuri.org/GetRandomWordResponse
int __ns1__GetRandomWord(
    _ns1__GetRandomWord*                ns1__GetRandomWord,	///< Input parameter
    _ns1__GetRandomWordResponse*        ns1__GetRandomWordResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetSearchLog                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetSearchLog" of service binding "KadServiceSoap"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/SetSearchLog"

  - Addressing input action: "http://tempuri.org/SetSearchLog"

  - Addressing output action: "http://tempuri.org/SetSearchLogResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetSearchLog(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SetSearchLog*                 ns1__SetSearchLog,
    // output parameters:
    _ns1__SetSearchLogResponse*         ns1__SetSearchLogResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetSearchLog(
    struct soap *soap,
    // input parameters:
    _ns1__SetSearchLog*                 ns1__SetSearchLog,
    // output parameters:
    _ns1__SetSearchLogResponse*         ns1__SetSearchLogResponse
  );
@endcode

C++ proxy class (defined in soapKadServiceSoapProxy.h):
@code
  class KadServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapKadServiceSoapService.h):
@code
  class KadServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SetSearchLog SOAP
//gsoap ns1  service method-style:	SetSearchLog document
//gsoap ns1  service method-encoding:	SetSearchLog literal
//gsoap ns1  service method-input-action:	SetSearchLog http://tempuri.org/SetSearchLog
//gsoap ns1  service method-output-action:	SetSearchLog http://tempuri.org/SetSearchLogResponse
int __ns1__SetSearchLog(
    _ns1__SetSearchLog*                 ns1__SetSearchLog,	///< Input parameter
    _ns1__SetSearchLogResponse*         ns1__SetSearchLogResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetFeedback                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetFeedback" of service binding "KadServiceSoap"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/SetFeedback"

  - Addressing input action: "http://tempuri.org/SetFeedback"

  - Addressing output action: "http://tempuri.org/SetFeedbackResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetFeedback(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SetFeedback*                  ns1__SetFeedback,
    // output parameters:
    _ns1__SetFeedbackResponse*          ns1__SetFeedbackResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetFeedback(
    struct soap *soap,
    // input parameters:
    _ns1__SetFeedback*                  ns1__SetFeedback,
    // output parameters:
    _ns1__SetFeedbackResponse*          ns1__SetFeedbackResponse
  );
@endcode

C++ proxy class (defined in soapKadServiceSoapProxy.h):
@code
  class KadServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapKadServiceSoapService.h):
@code
  class KadServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SetFeedback SOAP
//gsoap ns1  service method-style:	SetFeedback document
//gsoap ns1  service method-encoding:	SetFeedback literal
//gsoap ns1  service method-input-action:	SetFeedback http://tempuri.org/SetFeedback
//gsoap ns1  service method-output-action:	SetFeedback http://tempuri.org/SetFeedbackResponse
int __ns1__SetFeedback(
    _ns1__SetFeedback*                  ns1__SetFeedback,	///< Input parameter
    _ns1__SetFeedbackResponse*          ns1__SetFeedbackResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetPlayLog                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetPlayLog" of service binding "KadServiceSoap"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/SetPlayLog"

  - Addressing input action: "http://tempuri.org/SetPlayLog"

  - Addressing output action: "http://tempuri.org/SetPlayLogResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetPlayLog(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SetPlayLog*                   ns1__SetPlayLog,
    // output parameters:
    _ns1__SetPlayLogResponse*           ns1__SetPlayLogResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetPlayLog(
    struct soap *soap,
    // input parameters:
    _ns1__SetPlayLog*                   ns1__SetPlayLog,
    // output parameters:
    _ns1__SetPlayLogResponse*           ns1__SetPlayLogResponse
  );
@endcode

C++ proxy class (defined in soapKadServiceSoapProxy.h):
@code
  class KadServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapKadServiceSoapService.h):
@code
  class KadServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SetPlayLog SOAP
//gsoap ns1  service method-style:	SetPlayLog document
//gsoap ns1  service method-encoding:	SetPlayLog literal
//gsoap ns1  service method-input-action:	SetPlayLog http://tempuri.org/SetPlayLog
//gsoap ns1  service method-output-action:	SetPlayLog http://tempuri.org/SetPlayLogResponse
int __ns1__SetPlayLog(
    _ns1__SetPlayLog*                   ns1__SetPlayLog,	///< Input parameter
    _ns1__SetPlayLogResponse*           ns1__SetPlayLogResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetSystemNotify_                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetSystemNotify_" of service binding "KadServiceSoap"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/GetSystemNotify"

  - Addressing input action: "http://tempuri.org/GetSystemNotify"

  - Addressing output action: "http://tempuri.org/GetSystemNotifyResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetSystemNotify_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetSystemNotify*              ns1__GetSystemNotify,
    // output parameters:
    _ns1__GetSystemNotifyResponse*      ns1__GetSystemNotifyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetSystemNotify_(
    struct soap *soap,
    // input parameters:
    _ns1__GetSystemNotify*              ns1__GetSystemNotify,
    // output parameters:
    _ns1__GetSystemNotifyResponse*      ns1__GetSystemNotifyResponse
  );
@endcode

C++ proxy class (defined in soapKadServiceSoapProxy.h):
@code
  class KadServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapKadServiceSoapService.h):
@code
  class KadServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetSystemNotify_ SOAP
//gsoap ns1  service method-style:	GetSystemNotify_ document
//gsoap ns1  service method-encoding:	GetSystemNotify_ literal
//gsoap ns1  service method-input-action:	GetSystemNotify_ http://tempuri.org/GetSystemNotify
//gsoap ns1  service method-output-action:	GetSystemNotify_ http://tempuri.org/GetSystemNotifyResponse
int __ns1__GetSystemNotify_(
    _ns1__GetSystemNotify*              ns1__GetSystemNotify,	///< Input parameter
    _ns1__GetSystemNotifyResponse*      ns1__GetSystemNotifyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetSystemMessage_                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetSystemMessage_" of service binding "KadServiceSoap"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/GetSystemMessage"

  - Addressing input action: "http://tempuri.org/GetSystemMessage"

  - Addressing output action: "http://tempuri.org/GetSystemMessageResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetSystemMessage_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetSystemMessage*             ns1__GetSystemMessage,
    // output parameters:
    _ns1__GetSystemMessageResponse*     ns1__GetSystemMessageResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetSystemMessage_(
    struct soap *soap,
    // input parameters:
    _ns1__GetSystemMessage*             ns1__GetSystemMessage,
    // output parameters:
    _ns1__GetSystemMessageResponse*     ns1__GetSystemMessageResponse
  );
@endcode

C++ proxy class (defined in soapKadServiceSoapProxy.h):
@code
  class KadServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapKadServiceSoapService.h):
@code
  class KadServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetSystemMessage_ SOAP
//gsoap ns1  service method-style:	GetSystemMessage_ document
//gsoap ns1  service method-encoding:	GetSystemMessage_ literal
//gsoap ns1  service method-input-action:	GetSystemMessage_ http://tempuri.org/GetSystemMessage
//gsoap ns1  service method-output-action:	GetSystemMessage_ http://tempuri.org/GetSystemMessageResponse
int __ns1__GetSystemMessage_(
    _ns1__GetSystemMessage*             ns1__GetSystemMessage,	///< Input parameter
    _ns1__GetSystemMessageResponse*     ns1__GetSystemMessageResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetUserSetting_                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetUserSetting_" of service binding "KadServiceSoap"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/GetUserSetting"

  - Addressing input action: "http://tempuri.org/GetUserSetting"

  - Addressing output action: "http://tempuri.org/GetUserSettingResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetUserSetting_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetUserSetting*               ns1__GetUserSetting,
    // output parameters:
    _ns1__GetUserSettingResponse*       ns1__GetUserSettingResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetUserSetting_(
    struct soap *soap,
    // input parameters:
    _ns1__GetUserSetting*               ns1__GetUserSetting,
    // output parameters:
    _ns1__GetUserSettingResponse*       ns1__GetUserSettingResponse
  );
@endcode

C++ proxy class (defined in soapKadServiceSoapProxy.h):
@code
  class KadServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapKadServiceSoapService.h):
@code
  class KadServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetUserSetting_ SOAP
//gsoap ns1  service method-style:	GetUserSetting_ document
//gsoap ns1  service method-encoding:	GetUserSetting_ literal
//gsoap ns1  service method-input-action:	GetUserSetting_ http://tempuri.org/GetUserSetting
//gsoap ns1  service method-output-action:	GetUserSetting_ http://tempuri.org/GetUserSettingResponse
int __ns1__GetUserSetting_(
    _ns1__GetUserSetting*               ns1__GetUserSetting,	///< Input parameter
    _ns1__GetUserSettingResponse*       ns1__GetUserSettingResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetSensitiveWords_                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetSensitiveWords_" of service binding "KadServiceSoap"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/GetSensitiveWords"

  - Addressing input action: "http://tempuri.org/GetSensitiveWords"

  - Addressing output action: "http://tempuri.org/GetSensitiveWordsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetSensitiveWords_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetSensitiveWords*            ns1__GetSensitiveWords,
    // output parameters:
    _ns1__GetSensitiveWordsResponse*    ns1__GetSensitiveWordsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetSensitiveWords_(
    struct soap *soap,
    // input parameters:
    _ns1__GetSensitiveWords*            ns1__GetSensitiveWords,
    // output parameters:
    _ns1__GetSensitiveWordsResponse*    ns1__GetSensitiveWordsResponse
  );
@endcode

C++ proxy class (defined in soapKadServiceSoapProxy.h):
@code
  class KadServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapKadServiceSoapService.h):
@code
  class KadServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetSensitiveWords_ SOAP
//gsoap ns1  service method-style:	GetSensitiveWords_ document
//gsoap ns1  service method-encoding:	GetSensitiveWords_ literal
//gsoap ns1  service method-input-action:	GetSensitiveWords_ http://tempuri.org/GetSensitiveWords
//gsoap ns1  service method-output-action:	GetSensitiveWords_ http://tempuri.org/GetSensitiveWordsResponse
int __ns1__GetSensitiveWords_(
    _ns1__GetSensitiveWords*            ns1__GetSensitiveWords,	///< Input parameter
    _ns1__GetSensitiveWordsResponse*    ns1__GetSensitiveWordsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetHotWords_                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetHotWords_" of service binding "KadServiceSoap"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/GetHotWords"

  - Addressing input action: "http://tempuri.org/GetHotWords"

  - Addressing output action: "http://tempuri.org/GetHotWordsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetHotWords_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetHotWords*                  ns1__GetHotWords,
    // output parameters:
    _ns1__GetHotWordsResponse*          ns1__GetHotWordsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetHotWords_(
    struct soap *soap,
    // input parameters:
    _ns1__GetHotWords*                  ns1__GetHotWords,
    // output parameters:
    _ns1__GetHotWordsResponse*          ns1__GetHotWordsResponse
  );
@endcode

C++ proxy class (defined in soapKadServiceSoapProxy.h):
@code
  class KadServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapKadServiceSoapService.h):
@code
  class KadServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetHotWords_ SOAP
//gsoap ns1  service method-style:	GetHotWords_ document
//gsoap ns1  service method-encoding:	GetHotWords_ literal
//gsoap ns1  service method-input-action:	GetHotWords_ http://tempuri.org/GetHotWords
//gsoap ns1  service method-output-action:	GetHotWords_ http://tempuri.org/GetHotWordsResponse
int __ns1__GetHotWords_(
    _ns1__GetHotWords*                  ns1__GetHotWords,	///< Input parameter
    _ns1__GetHotWordsResponse*          ns1__GetHotWordsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetHotEd2ks_                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetHotEd2ks_" of service binding "KadServiceSoap"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/GetHotEd2ks"

  - Addressing input action: "http://tempuri.org/GetHotEd2ks"

  - Addressing output action: "http://tempuri.org/GetHotEd2ksResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetHotEd2ks_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetHotEd2ks*                  ns1__GetHotEd2ks,
    // output parameters:
    _ns1__GetHotEd2ksResponse*          ns1__GetHotEd2ksResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetHotEd2ks_(
    struct soap *soap,
    // input parameters:
    _ns1__GetHotEd2ks*                  ns1__GetHotEd2ks,
    // output parameters:
    _ns1__GetHotEd2ksResponse*          ns1__GetHotEd2ksResponse
  );
@endcode

C++ proxy class (defined in soapKadServiceSoapProxy.h):
@code
  class KadServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapKadServiceSoapService.h):
@code
  class KadServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetHotEd2ks_ SOAP
//gsoap ns1  service method-style:	GetHotEd2ks_ document
//gsoap ns1  service method-encoding:	GetHotEd2ks_ literal
//gsoap ns1  service method-input-action:	GetHotEd2ks_ http://tempuri.org/GetHotEd2ks
//gsoap ns1  service method-output-action:	GetHotEd2ks_ http://tempuri.org/GetHotEd2ksResponse
int __ns1__GetHotEd2ks_(
    _ns1__GetHotEd2ks*                  ns1__GetHotEd2ks,	///< Input parameter
    _ns1__GetHotEd2ksResponse*          ns1__GetHotEd2ksResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetRandomWord_                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetRandomWord_" of service binding "KadServiceSoap"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/GetRandomWord"

  - Addressing input action: "http://tempuri.org/GetRandomWord"

  - Addressing output action: "http://tempuri.org/GetRandomWordResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetRandomWord_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetRandomWord*                ns1__GetRandomWord,
    // output parameters:
    _ns1__GetRandomWordResponse*        ns1__GetRandomWordResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetRandomWord_(
    struct soap *soap,
    // input parameters:
    _ns1__GetRandomWord*                ns1__GetRandomWord,
    // output parameters:
    _ns1__GetRandomWordResponse*        ns1__GetRandomWordResponse
  );
@endcode

C++ proxy class (defined in soapKadServiceSoapProxy.h):
@code
  class KadServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapKadServiceSoapService.h):
@code
  class KadServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetRandomWord_ SOAP
//gsoap ns1  service method-style:	GetRandomWord_ document
//gsoap ns1  service method-encoding:	GetRandomWord_ literal
//gsoap ns1  service method-input-action:	GetRandomWord_ http://tempuri.org/GetRandomWord
//gsoap ns1  service method-output-action:	GetRandomWord_ http://tempuri.org/GetRandomWordResponse
int __ns1__GetRandomWord_(
    _ns1__GetRandomWord*                ns1__GetRandomWord,	///< Input parameter
    _ns1__GetRandomWordResponse*        ns1__GetRandomWordResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetSearchLog_                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetSearchLog_" of service binding "KadServiceSoap"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/SetSearchLog"

  - Addressing input action: "http://tempuri.org/SetSearchLog"

  - Addressing output action: "http://tempuri.org/SetSearchLogResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetSearchLog_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SetSearchLog*                 ns1__SetSearchLog,
    // output parameters:
    _ns1__SetSearchLogResponse*         ns1__SetSearchLogResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetSearchLog_(
    struct soap *soap,
    // input parameters:
    _ns1__SetSearchLog*                 ns1__SetSearchLog,
    // output parameters:
    _ns1__SetSearchLogResponse*         ns1__SetSearchLogResponse
  );
@endcode

C++ proxy class (defined in soapKadServiceSoapProxy.h):
@code
  class KadServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapKadServiceSoapService.h):
@code
  class KadServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SetSearchLog_ SOAP
//gsoap ns1  service method-style:	SetSearchLog_ document
//gsoap ns1  service method-encoding:	SetSearchLog_ literal
//gsoap ns1  service method-input-action:	SetSearchLog_ http://tempuri.org/SetSearchLog
//gsoap ns1  service method-output-action:	SetSearchLog_ http://tempuri.org/SetSearchLogResponse
int __ns1__SetSearchLog_(
    _ns1__SetSearchLog*                 ns1__SetSearchLog,	///< Input parameter
    _ns1__SetSearchLogResponse*         ns1__SetSearchLogResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetFeedback_                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetFeedback_" of service binding "KadServiceSoap"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/SetFeedback"

  - Addressing input action: "http://tempuri.org/SetFeedback"

  - Addressing output action: "http://tempuri.org/SetFeedbackResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetFeedback_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SetFeedback*                  ns1__SetFeedback,
    // output parameters:
    _ns1__SetFeedbackResponse*          ns1__SetFeedbackResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetFeedback_(
    struct soap *soap,
    // input parameters:
    _ns1__SetFeedback*                  ns1__SetFeedback,
    // output parameters:
    _ns1__SetFeedbackResponse*          ns1__SetFeedbackResponse
  );
@endcode

C++ proxy class (defined in soapKadServiceSoapProxy.h):
@code
  class KadServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapKadServiceSoapService.h):
@code
  class KadServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SetFeedback_ SOAP
//gsoap ns1  service method-style:	SetFeedback_ document
//gsoap ns1  service method-encoding:	SetFeedback_ literal
//gsoap ns1  service method-input-action:	SetFeedback_ http://tempuri.org/SetFeedback
//gsoap ns1  service method-output-action:	SetFeedback_ http://tempuri.org/SetFeedbackResponse
int __ns1__SetFeedback_(
    _ns1__SetFeedback*                  ns1__SetFeedback,	///< Input parameter
    _ns1__SetFeedbackResponse*          ns1__SetFeedbackResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetPlayLog_                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetPlayLog_" of service binding "KadServiceSoap"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/SetPlayLog"

  - Addressing input action: "http://tempuri.org/SetPlayLog"

  - Addressing output action: "http://tempuri.org/SetPlayLogResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetPlayLog_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SetPlayLog*                   ns1__SetPlayLog,
    // output parameters:
    _ns1__SetPlayLogResponse*           ns1__SetPlayLogResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetPlayLog_(
    struct soap *soap,
    // input parameters:
    _ns1__SetPlayLog*                   ns1__SetPlayLog,
    // output parameters:
    _ns1__SetPlayLogResponse*           ns1__SetPlayLogResponse
  );
@endcode

C++ proxy class (defined in soapKadServiceSoapProxy.h):
@code
  class KadServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapKadServiceSoapService.h):
@code
  class KadServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SetPlayLog_ SOAP
//gsoap ns1  service method-style:	SetPlayLog_ document
//gsoap ns1  service method-encoding:	SetPlayLog_ literal
//gsoap ns1  service method-input-action:	SetPlayLog_ http://tempuri.org/SetPlayLog
//gsoap ns1  service method-output-action:	SetPlayLog_ http://tempuri.org/SetPlayLogResponse
int __ns1__SetPlayLog_(
    _ns1__SetPlayLog*                   ns1__SetPlayLog,	///< Input parameter
    _ns1__SetPlayLogResponse*           ns1__SetPlayLogResponse	///< Output parameter
);

/**

@page KadServiceSoap Binding "KadServiceSoap"

@section KadServiceSoap_policy_enablers Policy Enablers of Binding  "KadServiceSoap"

Based on policies, this service imports

  - WS-Policy reminders and enablers:
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read in XML and deserialized from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

Data can be serialized in XML and written to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://tempuri.org/"

  - <ns1:GetSystemNotify> @ref _ns1__GetSystemNotify
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetSystemNotify(struct soap*, _ns1__GetSystemNotify*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetSystemNotify(struct soap*, _ns1__GetSystemNotify*);
    @endcode

  - <ns1:GetSystemNotifyResponse> @ref _ns1__GetSystemNotifyResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetSystemNotifyResponse(struct soap*, _ns1__GetSystemNotifyResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetSystemNotifyResponse(struct soap*, _ns1__GetSystemNotifyResponse*);
    @endcode

  - <ns1:GetSystemMessage> @ref _ns1__GetSystemMessage
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetSystemMessage(struct soap*, _ns1__GetSystemMessage*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetSystemMessage(struct soap*, _ns1__GetSystemMessage*);
    @endcode

  - <ns1:GetSystemMessageResponse> @ref _ns1__GetSystemMessageResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetSystemMessageResponse(struct soap*, _ns1__GetSystemMessageResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetSystemMessageResponse(struct soap*, _ns1__GetSystemMessageResponse*);
    @endcode

  - <ns1:GetUserSetting> @ref _ns1__GetUserSetting
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetUserSetting(struct soap*, _ns1__GetUserSetting*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetUserSetting(struct soap*, _ns1__GetUserSetting*);
    @endcode

  - <ns1:GetUserSettingResponse> @ref _ns1__GetUserSettingResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetUserSettingResponse(struct soap*, _ns1__GetUserSettingResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetUserSettingResponse(struct soap*, _ns1__GetUserSettingResponse*);
    @endcode

  - <ns1:GetSensitiveWords> @ref _ns1__GetSensitiveWords
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetSensitiveWords(struct soap*, _ns1__GetSensitiveWords*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetSensitiveWords(struct soap*, _ns1__GetSensitiveWords*);
    @endcode

  - <ns1:GetSensitiveWordsResponse> @ref _ns1__GetSensitiveWordsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetSensitiveWordsResponse(struct soap*, _ns1__GetSensitiveWordsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetSensitiveWordsResponse(struct soap*, _ns1__GetSensitiveWordsResponse*);
    @endcode

  - <ns1:GetHotWords> @ref _ns1__GetHotWords
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetHotWords(struct soap*, _ns1__GetHotWords*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetHotWords(struct soap*, _ns1__GetHotWords*);
    @endcode

  - <ns1:GetHotWordsResponse> @ref _ns1__GetHotWordsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetHotWordsResponse(struct soap*, _ns1__GetHotWordsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetHotWordsResponse(struct soap*, _ns1__GetHotWordsResponse*);
    @endcode

  - <ns1:GetHotEd2ks> @ref _ns1__GetHotEd2ks
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetHotEd2ks(struct soap*, _ns1__GetHotEd2ks*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetHotEd2ks(struct soap*, _ns1__GetHotEd2ks*);
    @endcode

  - <ns1:GetHotEd2ksResponse> @ref _ns1__GetHotEd2ksResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetHotEd2ksResponse(struct soap*, _ns1__GetHotEd2ksResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetHotEd2ksResponse(struct soap*, _ns1__GetHotEd2ksResponse*);
    @endcode

  - <ns1:GetRandomWord> @ref _ns1__GetRandomWord
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetRandomWord(struct soap*, _ns1__GetRandomWord*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetRandomWord(struct soap*, _ns1__GetRandomWord*);
    @endcode

  - <ns1:GetRandomWordResponse> @ref _ns1__GetRandomWordResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetRandomWordResponse(struct soap*, _ns1__GetRandomWordResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetRandomWordResponse(struct soap*, _ns1__GetRandomWordResponse*);
    @endcode

  - <ns1:SetSearchLog> @ref _ns1__SetSearchLog
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetSearchLog(struct soap*, _ns1__SetSearchLog*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetSearchLog(struct soap*, _ns1__SetSearchLog*);
    @endcode

  - <ns1:SetSearchLogResponse> @ref _ns1__SetSearchLogResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetSearchLogResponse(struct soap*, _ns1__SetSearchLogResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetSearchLogResponse(struct soap*, _ns1__SetSearchLogResponse*);
    @endcode

  - <ns1:SetFeedback> @ref _ns1__SetFeedback
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetFeedback(struct soap*, _ns1__SetFeedback*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetFeedback(struct soap*, _ns1__SetFeedback*);
    @endcode

  - <ns1:SetFeedbackResponse> @ref _ns1__SetFeedbackResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetFeedbackResponse(struct soap*, _ns1__SetFeedbackResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetFeedbackResponse(struct soap*, _ns1__SetFeedbackResponse*);
    @endcode

  - <ns1:SetPlayLog> @ref _ns1__SetPlayLog
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetPlayLog(struct soap*, _ns1__SetPlayLog*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetPlayLog(struct soap*, _ns1__SetPlayLog*);
    @endcode

  - <ns1:SetPlayLogResponse> @ref _ns1__SetPlayLogResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetPlayLogResponse(struct soap*, _ns1__SetPlayLogResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetPlayLogResponse(struct soap*, _ns1__SetPlayLogResponse*);
    @endcode

*/

/* End of service.h */
