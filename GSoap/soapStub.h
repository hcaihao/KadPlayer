/* soapStub.h
   Generated by gSOAP 2.8.17r from service.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20817
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns1__UserSetting
#define SOAP_TYPE_ns1__UserSetting (8)
/* ns1:UserSetting */
class SOAP_CMAC ns1__UserSetting
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique type id SOAP_TYPE_ns1__UserSetting */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UserSetting() { ns1__UserSetting::soap_default(NULL); }
	virtual ~ns1__UserSetting() { }
};
#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE__ns1__GetSystemNotify
#define SOAP_TYPE__ns1__GetSystemNotify (9)
/* ns1:GetSystemNotify */
class SOAP_CMAC _ns1__GetSystemNotify
{
public:
	std::string *mac;	/* optional element of type xsd:string */
	std::string *version;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique type id SOAP_TYPE__ns1__GetSystemNotify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetSystemNotify() { _ns1__GetSystemNotify::soap_default(NULL); }
	virtual ~_ns1__GetSystemNotify() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetSystemNotifyResponse
#define SOAP_TYPE__ns1__GetSystemNotifyResponse (10)
/* ns1:GetSystemNotifyResponse */
class SOAP_CMAC _ns1__GetSystemNotifyResponse
{
public:
	std::string *GetSystemNotifyResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique type id SOAP_TYPE__ns1__GetSystemNotifyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetSystemNotifyResponse() { _ns1__GetSystemNotifyResponse::soap_default(NULL); }
	virtual ~_ns1__GetSystemNotifyResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetSystemMessage
#define SOAP_TYPE__ns1__GetSystemMessage (11)
/* ns1:GetSystemMessage */
class SOAP_CMAC _ns1__GetSystemMessage
{
public:
	std::string *mac;	/* optional element of type xsd:string */
	std::string *version;	/* optional element of type xsd:string */
	std::string *extension;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique type id SOAP_TYPE__ns1__GetSystemMessage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetSystemMessage() { _ns1__GetSystemMessage::soap_default(NULL); }
	virtual ~_ns1__GetSystemMessage() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetSystemMessageResponse
#define SOAP_TYPE__ns1__GetSystemMessageResponse (12)
/* ns1:GetSystemMessageResponse */
class SOAP_CMAC _ns1__GetSystemMessageResponse
{
public:
	std::string *GetSystemMessageResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique type id SOAP_TYPE__ns1__GetSystemMessageResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetSystemMessageResponse() { _ns1__GetSystemMessageResponse::soap_default(NULL); }
	virtual ~_ns1__GetSystemMessageResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetUserSetting
#define SOAP_TYPE__ns1__GetUserSetting (13)
/* ns1:GetUserSetting */
class SOAP_CMAC _ns1__GetUserSetting
{
public:
	std::string *mac;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique type id SOAP_TYPE__ns1__GetUserSetting */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetUserSetting() { _ns1__GetUserSetting::soap_default(NULL); }
	virtual ~_ns1__GetUserSetting() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetUserSettingResponse
#define SOAP_TYPE__ns1__GetUserSettingResponse (14)
/* ns1:GetUserSettingResponse */
class SOAP_CMAC _ns1__GetUserSettingResponse
{
public:
	ns1__UserSetting *GetUserSettingResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:UserSetting */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique type id SOAP_TYPE__ns1__GetUserSettingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetUserSettingResponse() { _ns1__GetUserSettingResponse::soap_default(NULL); }
	virtual ~_ns1__GetUserSettingResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetSensitiveWords
#define SOAP_TYPE__ns1__GetSensitiveWords (15)
/* ns1:GetSensitiveWords */
class SOAP_CMAC _ns1__GetSensitiveWords
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique type id SOAP_TYPE__ns1__GetSensitiveWords */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetSensitiveWords() { _ns1__GetSensitiveWords::soap_default(NULL); }
	virtual ~_ns1__GetSensitiveWords() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetSensitiveWordsResponse
#define SOAP_TYPE__ns1__GetSensitiveWordsResponse (16)
/* ns1:GetSensitiveWordsResponse */
class SOAP_CMAC _ns1__GetSensitiveWordsResponse
{
public:
	std::string *GetSensitiveWordsResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique type id SOAP_TYPE__ns1__GetSensitiveWordsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetSensitiveWordsResponse() { _ns1__GetSensitiveWordsResponse::soap_default(NULL); }
	virtual ~_ns1__GetSensitiveWordsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetHotWords
#define SOAP_TYPE__ns1__GetHotWords (17)
/* ns1:GetHotWords */
class SOAP_CMAC _ns1__GetHotWords
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique type id SOAP_TYPE__ns1__GetHotWords */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetHotWords() { _ns1__GetHotWords::soap_default(NULL); }
	virtual ~_ns1__GetHotWords() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetHotWordsResponse
#define SOAP_TYPE__ns1__GetHotWordsResponse (18)
/* ns1:GetHotWordsResponse */
class SOAP_CMAC _ns1__GetHotWordsResponse
{
public:
	std::string *GetHotWordsResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique type id SOAP_TYPE__ns1__GetHotWordsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetHotWordsResponse() { _ns1__GetHotWordsResponse::soap_default(NULL); }
	virtual ~_ns1__GetHotWordsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetHotEd2ks
#define SOAP_TYPE__ns1__GetHotEd2ks (19)
/* ns1:GetHotEd2ks */
class SOAP_CMAC _ns1__GetHotEd2ks
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique type id SOAP_TYPE__ns1__GetHotEd2ks */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetHotEd2ks() { _ns1__GetHotEd2ks::soap_default(NULL); }
	virtual ~_ns1__GetHotEd2ks() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetHotEd2ksResponse
#define SOAP_TYPE__ns1__GetHotEd2ksResponse (20)
/* ns1:GetHotEd2ksResponse */
class SOAP_CMAC _ns1__GetHotEd2ksResponse
{
public:
	std::string *GetHotEd2ksResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique type id SOAP_TYPE__ns1__GetHotEd2ksResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetHotEd2ksResponse() { _ns1__GetHotEd2ksResponse::soap_default(NULL); }
	virtual ~_ns1__GetHotEd2ksResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetRandomWord
#define SOAP_TYPE__ns1__GetRandomWord (21)
/* ns1:GetRandomWord */
class SOAP_CMAC _ns1__GetRandomWord
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique type id SOAP_TYPE__ns1__GetRandomWord */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetRandomWord() { _ns1__GetRandomWord::soap_default(NULL); }
	virtual ~_ns1__GetRandomWord() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetRandomWordResponse
#define SOAP_TYPE__ns1__GetRandomWordResponse (22)
/* ns1:GetRandomWordResponse */
class SOAP_CMAC _ns1__GetRandomWordResponse
{
public:
	std::string *GetRandomWordResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique type id SOAP_TYPE__ns1__GetRandomWordResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetRandomWordResponse() { _ns1__GetRandomWordResponse::soap_default(NULL); }
	virtual ~_ns1__GetRandomWordResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetSearchLog
#define SOAP_TYPE__ns1__SetSearchLog (23)
/* ns1:SetSearchLog */
class SOAP_CMAC _ns1__SetSearchLog
{
public:
	std::string *mac;	/* optional element of type xsd:string */
	std::string *keys;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique type id SOAP_TYPE__ns1__SetSearchLog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetSearchLog() { _ns1__SetSearchLog::soap_default(NULL); }
	virtual ~_ns1__SetSearchLog() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetSearchLogResponse
#define SOAP_TYPE__ns1__SetSearchLogResponse (24)
/* ns1:SetSearchLogResponse */
class SOAP_CMAC _ns1__SetSearchLogResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique type id SOAP_TYPE__ns1__SetSearchLogResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetSearchLogResponse() { _ns1__SetSearchLogResponse::soap_default(NULL); }
	virtual ~_ns1__SetSearchLogResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetFeedback
#define SOAP_TYPE__ns1__SetFeedback (25)
/* ns1:SetFeedback */
class SOAP_CMAC _ns1__SetFeedback
{
public:
	std::string *mac;	/* optional element of type xsd:string */
	std::string *version;	/* optional element of type xsd:string */
	int type;	/* required element of type xsd:int */
	std::string *content;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique type id SOAP_TYPE__ns1__SetFeedback */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetFeedback() { _ns1__SetFeedback::soap_default(NULL); }
	virtual ~_ns1__SetFeedback() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetFeedbackResponse
#define SOAP_TYPE__ns1__SetFeedbackResponse (26)
/* ns1:SetFeedbackResponse */
class SOAP_CMAC _ns1__SetFeedbackResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique type id SOAP_TYPE__ns1__SetFeedbackResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetFeedbackResponse() { _ns1__SetFeedbackResponse::soap_default(NULL); }
	virtual ~_ns1__SetFeedbackResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetPlayLog
#define SOAP_TYPE__ns1__SetPlayLog (27)
/* ns1:SetPlayLog */
class SOAP_CMAC _ns1__SetPlayLog
{
public:
	std::string *mac;	/* optional element of type xsd:string */
	std::string *links;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique type id SOAP_TYPE__ns1__SetPlayLog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetPlayLog() { _ns1__SetPlayLog::soap_default(NULL); }
	virtual ~_ns1__SetPlayLog() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetPlayLogResponse
#define SOAP_TYPE__ns1__SetPlayLogResponse (28)
/* ns1:SetPlayLogResponse */
class SOAP_CMAC _ns1__SetPlayLogResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique type id SOAP_TYPE__ns1__SetPlayLogResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetPlayLogResponse() { _ns1__SetPlayLogResponse::soap_default(NULL); }
	virtual ~_ns1__SetPlayLogResponse() { }
};
#endif

#ifndef SOAP_TYPE___ns1__GetSystemNotify
#define SOAP_TYPE___ns1__GetSystemNotify (36)
/* Operation wrapper: */
struct __ns1__GetSystemNotify
{
public:
	_ns1__GetSystemNotify *ns1__GetSystemNotify;	/* optional element of type ns1:GetSystemNotify */
public:
	int soap_type() const { return 36; } /* = unique type id SOAP_TYPE___ns1__GetSystemNotify */
};
#endif

#ifndef SOAP_TYPE___ns1__GetSystemMessage
#define SOAP_TYPE___ns1__GetSystemMessage (40)
/* Operation wrapper: */
struct __ns1__GetSystemMessage
{
public:
	_ns1__GetSystemMessage *ns1__GetSystemMessage;	/* optional element of type ns1:GetSystemMessage */
public:
	int soap_type() const { return 40; } /* = unique type id SOAP_TYPE___ns1__GetSystemMessage */
};
#endif

#ifndef SOAP_TYPE___ns1__GetUserSetting
#define SOAP_TYPE___ns1__GetUserSetting (44)
/* Operation wrapper: */
struct __ns1__GetUserSetting
{
public:
	_ns1__GetUserSetting *ns1__GetUserSetting;	/* optional element of type ns1:GetUserSetting */
public:
	int soap_type() const { return 44; } /* = unique type id SOAP_TYPE___ns1__GetUserSetting */
};
#endif

#ifndef SOAP_TYPE___ns1__GetSensitiveWords
#define SOAP_TYPE___ns1__GetSensitiveWords (48)
/* Operation wrapper: */
struct __ns1__GetSensitiveWords
{
public:
	_ns1__GetSensitiveWords *ns1__GetSensitiveWords;	/* optional element of type ns1:GetSensitiveWords */
public:
	int soap_type() const { return 48; } /* = unique type id SOAP_TYPE___ns1__GetSensitiveWords */
};
#endif

#ifndef SOAP_TYPE___ns1__GetHotWords
#define SOAP_TYPE___ns1__GetHotWords (52)
/* Operation wrapper: */
struct __ns1__GetHotWords
{
public:
	_ns1__GetHotWords *ns1__GetHotWords;	/* optional element of type ns1:GetHotWords */
public:
	int soap_type() const { return 52; } /* = unique type id SOAP_TYPE___ns1__GetHotWords */
};
#endif

#ifndef SOAP_TYPE___ns1__GetHotEd2ks
#define SOAP_TYPE___ns1__GetHotEd2ks (56)
/* Operation wrapper: */
struct __ns1__GetHotEd2ks
{
public:
	_ns1__GetHotEd2ks *ns1__GetHotEd2ks;	/* optional element of type ns1:GetHotEd2ks */
public:
	int soap_type() const { return 56; } /* = unique type id SOAP_TYPE___ns1__GetHotEd2ks */
};
#endif

#ifndef SOAP_TYPE___ns1__GetRandomWord
#define SOAP_TYPE___ns1__GetRandomWord (60)
/* Operation wrapper: */
struct __ns1__GetRandomWord
{
public:
	_ns1__GetRandomWord *ns1__GetRandomWord;	/* optional element of type ns1:GetRandomWord */
public:
	int soap_type() const { return 60; } /* = unique type id SOAP_TYPE___ns1__GetRandomWord */
};
#endif

#ifndef SOAP_TYPE___ns1__SetSearchLog
#define SOAP_TYPE___ns1__SetSearchLog (64)
/* Operation wrapper: */
struct __ns1__SetSearchLog
{
public:
	_ns1__SetSearchLog *ns1__SetSearchLog;	/* optional element of type ns1:SetSearchLog */
public:
	int soap_type() const { return 64; } /* = unique type id SOAP_TYPE___ns1__SetSearchLog */
};
#endif

#ifndef SOAP_TYPE___ns1__SetFeedback
#define SOAP_TYPE___ns1__SetFeedback (68)
/* Operation wrapper: */
struct __ns1__SetFeedback
{
public:
	_ns1__SetFeedback *ns1__SetFeedback;	/* optional element of type ns1:SetFeedback */
public:
	int soap_type() const { return 68; } /* = unique type id SOAP_TYPE___ns1__SetFeedback */
};
#endif

#ifndef SOAP_TYPE___ns1__SetPlayLog
#define SOAP_TYPE___ns1__SetPlayLog (72)
/* Operation wrapper: */
struct __ns1__SetPlayLog
{
public:
	_ns1__SetPlayLog *ns1__SetPlayLog;	/* optional element of type ns1:SetPlayLog */
public:
	int soap_type() const { return 72; } /* = unique type id SOAP_TYPE___ns1__SetPlayLog */
};
#endif

#ifndef SOAP_TYPE___ns1__GetSystemNotify_
#define SOAP_TYPE___ns1__GetSystemNotify_ (74)
/* Operation wrapper: */
struct __ns1__GetSystemNotify_
{
public:
	_ns1__GetSystemNotify *ns1__GetSystemNotify;	/* optional element of type ns1:GetSystemNotify */
public:
	int soap_type() const { return 74; } /* = unique type id SOAP_TYPE___ns1__GetSystemNotify_ */
};
#endif

#ifndef SOAP_TYPE___ns1__GetSystemMessage_
#define SOAP_TYPE___ns1__GetSystemMessage_ (76)
/* Operation wrapper: */
struct __ns1__GetSystemMessage_
{
public:
	_ns1__GetSystemMessage *ns1__GetSystemMessage;	/* optional element of type ns1:GetSystemMessage */
public:
	int soap_type() const { return 76; } /* = unique type id SOAP_TYPE___ns1__GetSystemMessage_ */
};
#endif

#ifndef SOAP_TYPE___ns1__GetUserSetting_
#define SOAP_TYPE___ns1__GetUserSetting_ (78)
/* Operation wrapper: */
struct __ns1__GetUserSetting_
{
public:
	_ns1__GetUserSetting *ns1__GetUserSetting;	/* optional element of type ns1:GetUserSetting */
public:
	int soap_type() const { return 78; } /* = unique type id SOAP_TYPE___ns1__GetUserSetting_ */
};
#endif

#ifndef SOAP_TYPE___ns1__GetSensitiveWords_
#define SOAP_TYPE___ns1__GetSensitiveWords_ (80)
/* Operation wrapper: */
struct __ns1__GetSensitiveWords_
{
public:
	_ns1__GetSensitiveWords *ns1__GetSensitiveWords;	/* optional element of type ns1:GetSensitiveWords */
public:
	int soap_type() const { return 80; } /* = unique type id SOAP_TYPE___ns1__GetSensitiveWords_ */
};
#endif

#ifndef SOAP_TYPE___ns1__GetHotWords_
#define SOAP_TYPE___ns1__GetHotWords_ (82)
/* Operation wrapper: */
struct __ns1__GetHotWords_
{
public:
	_ns1__GetHotWords *ns1__GetHotWords;	/* optional element of type ns1:GetHotWords */
public:
	int soap_type() const { return 82; } /* = unique type id SOAP_TYPE___ns1__GetHotWords_ */
};
#endif

#ifndef SOAP_TYPE___ns1__GetHotEd2ks_
#define SOAP_TYPE___ns1__GetHotEd2ks_ (84)
/* Operation wrapper: */
struct __ns1__GetHotEd2ks_
{
public:
	_ns1__GetHotEd2ks *ns1__GetHotEd2ks;	/* optional element of type ns1:GetHotEd2ks */
public:
	int soap_type() const { return 84; } /* = unique type id SOAP_TYPE___ns1__GetHotEd2ks_ */
};
#endif

#ifndef SOAP_TYPE___ns1__GetRandomWord_
#define SOAP_TYPE___ns1__GetRandomWord_ (86)
/* Operation wrapper: */
struct __ns1__GetRandomWord_
{
public:
	_ns1__GetRandomWord *ns1__GetRandomWord;	/* optional element of type ns1:GetRandomWord */
public:
	int soap_type() const { return 86; } /* = unique type id SOAP_TYPE___ns1__GetRandomWord_ */
};
#endif

#ifndef SOAP_TYPE___ns1__SetSearchLog_
#define SOAP_TYPE___ns1__SetSearchLog_ (88)
/* Operation wrapper: */
struct __ns1__SetSearchLog_
{
public:
	_ns1__SetSearchLog *ns1__SetSearchLog;	/* optional element of type ns1:SetSearchLog */
public:
	int soap_type() const { return 88; } /* = unique type id SOAP_TYPE___ns1__SetSearchLog_ */
};
#endif

#ifndef SOAP_TYPE___ns1__SetFeedback_
#define SOAP_TYPE___ns1__SetFeedback_ (90)
/* Operation wrapper: */
struct __ns1__SetFeedback_
{
public:
	_ns1__SetFeedback *ns1__SetFeedback;	/* optional element of type ns1:SetFeedback */
public:
	int soap_type() const { return 90; } /* = unique type id SOAP_TYPE___ns1__SetFeedback_ */
};
#endif

#ifndef SOAP_TYPE___ns1__SetPlayLog_
#define SOAP_TYPE___ns1__SetPlayLog_ (92)
/* Operation wrapper: */
struct __ns1__SetPlayLog_
{
public:
	_ns1__SetPlayLog *ns1__SetPlayLog;	/* optional element of type ns1:SetPlayLog */
public:
	int soap_type() const { return 92; } /* = unique type id SOAP_TYPE___ns1__SetPlayLog_ */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (93)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 93; } /* = unique type id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (94)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 94; } /* = unique type id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (96)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 96; } /* = unique type id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (99)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 99; } /* = unique type id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (100)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 100; } /* = unique type id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
