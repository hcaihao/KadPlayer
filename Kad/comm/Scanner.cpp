/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <errno.h>

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif


/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 24
#define YY_END_OF_BUFFER 25
static yyconst short int yy_acclist[182] =
    {   0,
       21,   21,   21,   21,   25,   21,   23,   24,   21,   24,
        1,   23,   24,   22,   23,   24,   23,   24,   20,   21,
       23,   24,    6,   23,   24,   21,   23,   24,   21,   23,
       24,   21,   23,   24,   21,   23,   24,   21,   23,   24,
       24,   24,   14,   24,    8,   24,    6,   24,    7,   24,
       24,   15,   24,   19,   24,   22,   24,   24,   16,   24,
       21,    5,   21,   21,   21,    2,   21,   21,   14,   14,
       14,   14,   10,   11,    9,   15,   15,   15,   15,   19,
       16,   16,   16,   16,    3,   21,    4,   21,   21,   14,
       15,   17,   16,   21,   14,   15,   16,   21,   18,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   13,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   12,   21,
       12
    } ;

static yyconst short int yy_accept[206] =
    {   0,
        1,    2,    3,    3,    3,    3,    3,    3,    3,    4,
        5,    5,    5,    6,    9,   11,   14,   17,   19,   23,
       26,   29,   32,   35,   38,   41,   42,   43,   45,   47,
       49,   51,   52,   54,   56,   58,   59,   61,   62,   64,
       65,   66,   68,   69,   70,   71,   72,   72,   73,   74,
       75,   76,   77,   78,   79,   80,   80,   81,   82,   83,
       84,   84,   84,   85,   87,   89,   90,   90,   90,   91,
       91,   91,   92,   92,   93,   93,   94,   95,   95,   96,
       96,   97,   97,   98,   98,   99,  100,  101,  102,  103,
      104,  105,  106,  107,  108,  109,  110,  111,  112,  113,

      114,  115,  116,  117,  117,  118,  119,  119,  120,  121,
      121,  122,  123,  123,  124,  125,  125,  126,  127,  127,
      128,  129,  129,  130,  131,  131,  132,  133,  133,  134,
      135,  135,  136,  137,  137,  138,  139,  139,  140,  141,
      141,  142,  143,  143,  144,  145,  145,  146,  147,  147,
      148,  149,  149,  150,  151,  151,  152,  153,  153,  154,
      155,  155,  156,  157,  157,  158,  159,  159,  160,  161,
      161,  162,  163,  163,  164,  165,  165,  167,  168,  168,
      169,  169,  170,  170,  171,  171,  172,  172,  173,  173,
      174,  174,  175,  175,  176,  176,  177,  177,  178,  178,

      179,  179,  181,  182,  182
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    4,    1,    1,    1,    1,    1,    5,
        5,    1,    6,    1,    7,    8,    9,   10,   10,   11,
       10,   10,   10,   10,   10,   10,   10,   12,    1,   13,
       14,   15,    1,   16,   17,   18,   19,   20,   21,   19,
       22,   23,   23,   23,   22,   23,   22,   24,   25,   23,
       23,   26,   23,   27,   23,   23,   23,   23,   23,   23,
        1,    1,    1,    1,    1,    1,   28,   29,   28,   30,

       31,   32,   33,   34,   35,   36,   37,   38,   39,   36,
       36,   36,   36,   36,   34,   36,   36,   36,   36,   36,
       36,   36,    1,   40,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[41] =
    {   0,
        1,    1,    2,    2,    2,    1,    1,    1,    1,    3,
        3,    1,    2,    2,    2,    1,    4,    4,    4,    4,
        4,    5,    5,    5,    5,    5,    5,    4,    4,    4,
        4,    4,    5,    5,    5,    5,    5,    5,    5,    1
    } ;

static yyconst short int yy_base[244] =
    {   0,
        0,   30,   49,   57,   65,   73,   88,    0,    5,   25,
      121,  129,  209,    0,    0, 1957, 1957, 1957,    0, 1957,
      117,  180,  176,  172,  163, 1957,    1,  149,    7, 1957,
      176,   16,  181,    0, 1957,   31,  213,    0,    0,  165,
      156,    0,  170,  243,   27,    0,  155, 1957, 1957, 1957,
     1957,  163,   35,    0, 1957,  157,    0,  166,  148,    0,
       39,  220, 1957,    0,    0,  141,  222,   41,  206,  230,
      185,  238,  250,  196,  240,  252,  163,  255,  257,  260,
      262,  267,  273,  277,   65,  282,  163,  303,  118,  326,
      109,  349,  103,  372,   95,  395,   99,  418,   45,  441,

      471,  502,  532,   42,  563,  287,  289,  586,  298,  300,
      609,  632,    0,  655,  678,    0,  701,  724,    0,  747,
      770,    0,  793,  816,    0,  839,  862,    0,  885,  908,
        0,  931,  954,    0,  977, 1000,    0, 1023, 1046,    0,
     1069, 1092,    0, 1115, 1138,    0, 1161, 1184,    0, 1207,
     1230,    0, 1253, 1276,    0, 1299, 1322,    0, 1345, 1368,
        0, 1391, 1414,    0, 1437, 1460,    0, 1483, 1506,    0,
     1529, 1552,    0, 1575, 1598,    0,    0, 1621,    0, 1644,
        0, 1667,    0, 1690,    0, 1713,    0, 1736,    0, 1759,
        0, 1782,    0, 1805,    0, 1828,    0,   29,   13,   27,

       14,    0, 1957, 1957, 1860, 1865, 1870, 1875, 1877, 1882,
     1887, 1890, 1892, 1894, 1896, 1898, 1900, 1902, 1904, 1906,
     1908, 1910, 1912, 1914, 1916, 1918, 1920, 1922, 1924, 1926,
     1928, 1930, 1932, 1934, 1936, 1938, 1940, 1942, 1944, 1946,
     1948, 1950, 1952
    } ;

static yyconst short int yy_def[244] =
    {   0,
      205,  205,  206,  206,  206,  206,  204,    7,  207,  207,
      206,  206,  204,  208,  208,  204,  204,  204,  208,  204,
      208,  208,  208,  208,  208,  204,  204,  204,  204,  204,
      204,  204,  204,  209,  204,  204,  204,  208,   21,  208,
      208,  208,  208,  204,   44,   28,  204,  204,  204,  204,
      204,   33,   52,   33,  204,  204,  209,  204,   58,   37,
      204,  204,  204,  208,  208,  208,  204,  204,  204,  204,
      204,   52,  204,  204,  204,  204,  208,  204,  204,  204,
       72,  204,  204,  204,  208,  204,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

      210,  208,  210,  211,  208,  208,  204,  208,  208,  204,
      208,  208,  212,  208,  208,  213,  208,  208,  214,  208,
      208,  215,  208,  208,  216,  208,  208,  217,  208,  208,
      218,  208,  208,  219,  208,  208,  220,  208,  208,  221,
      208,  208,  222,  208,  208,  223,  208,  208,  224,  208,
      208,  225,  208,  208,  226,  208,  208,  227,  208,  208,
      228,  208,  208,  229,  208,  208,  230,  208,  208,  231,
      208,  208,  232,  208,  208,  233,  208,  208,  234,  208,
      235,  208,  236,  208,  237,  208,  238,  208,  239,  208,
      240,  208,  241,  208,  242,  208,  243,  208,  204,  208,

      204,  208,  204,    0,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204
    } ;

static yyconst short int yy_nxt[1998] =
    {   0,
      204,   15,   16,   17,   18,  204,   19,   26,   35,   26,
       44,   44,   18,   20,   18,   21,   22,   26,   30,   26,
       49,   50,  203,   23,   24,   52,   52,   26,   35,   26,
       25,   15,   16,   17,   18,  202,   19,   26,   30,   26,
       58,   58,   18,   20,   18,   21,   22,   47,   74,   74,
       69,   69,  201,   23,   24,   56,   27,   47,   28,   28,
       25,   29,   30,   31,   27,   56,   28,   28,  200,   29,
       30,   31,   32,   87,   33,   33,   88,   29,   30,   31,
       32,  107,   33,   33,  101,   29,   30,   31,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   30,   26,   26,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   26,   36,   99,
       37,   37,   97,   29,   30,   31,   36,   95,   37,   37,
       93,   29,   30,   31,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   45,   91,   46,   46,
       68,   68,   71,   71,   69,   69,   72,   72,   62,   47,
      204,   89,   52,   52,   85,   58,   58,   77,   62,   47,
       66,   48,   65,   70,   64,   48,   73,   48,   53,   51,
       54,   54,   43,   70,   72,   72,   73,   42,   55,   63,

       41,   56,   55,   40,   63,   74,   74,   84,  204,   55,
      204,   56,  204,   55,  204,   69,   69,   55,  204,   55,
       59,  204,   60,   60,   61,   75,   75,   78,   78,   76,
       76,   79,   79,   62,  204,   80,   80,  204,   48,   81,
       81,  204,   48,   62,   48,  204,   63,   72,   72,   76,
       76,   63,   44,   44,  204,   82,   82,  204,  204,   83,
       83,   76,   76,   67,   79,   79,   79,   79,  204,   81,
       81,   81,   81,   67,  204,   48,   83,   83,  204,   48,
      204,   48,   83,   83,  204,   63,   86,   86,  204,   48,
       63,   86,   86,   48,  204,   48,  109,  109,  110,  110,

      204,  204,  204,  204,  204,  204,   63,  109,  109,  110,
      110,   63,   90,   90,  204,  204,  204,  204,  204,   90,
       90,   90,   90,   90,  204,  204,  204,  204,  204,  204,
       90,   90,   90,   90,   90,   92,   92,  112,  204,  113,
      204,  204,   92,   92,   92,   92,   92,  204,  204,  204,
      204,  204,  204,   92,   92,   92,   92,   92,   94,   94,
      204,  204,  204,  204,  204,   94,   94,   94,   94,   94,
      204,  204,  204,  204,  204,  204,   94,   94,   94,   94,
       94,   96,   96,  204,  204,  204,  204,  204,   96,   96,
       96,   96,   96,  204,  204,  204,  204,  204,  204,   96,

       96,   96,   96,   96,   98,   98,  204,  204,  204,  204,
      204,   98,   98,   98,   98,   98,  204,  204,  204,  204,
      204,  204,   98,   98,   98,   98,   98,  100,  100,  204,
      204,  204,  204,  204,  100,  100,  100,  100,  100,  204,
      204,  204,  204,  204,  204,  100,  100,  100,  100,  100,
      102,  102,  204,  204,  204,  204,  204,  102,  102,  102,
      102,  102,  204,  204,  204,  204,  204,  204,  102,  102,
      102,  102,  102,  104,  104,  104,  204,  204,  204,  204,
      204,  204,  204,  104,  104,  104,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,

      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
       38,  105,  105,  204,  204,  204,  204,  204,  105,  105,
      105,  105,  105,  204,  204,  204,  204,  204,  204,  105,
      105,  105,  105,  105,  104,  104,  104,  204,  204,  204,
      204,  204,  204,  204,  104,  104,  104,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  106,  108,  108,  204,  204,  204,  204,  204,  108,
      108,  108,  108,  108,  204,  204,  204,  204,  204,  204,
      108,  108,  108,  108,  108,  111,  111,  204,  204,  204,

      204,  204,  111,  111,  111,  111,  111,  204,  204,  204,
      204,  204,  204,  111,  111,  111,  111,  111,  114,  114,
      204,  204,  204,  204,  204,  114,  114,  114,  114,  114,
      204,  204,  204,  204,  204,  204,  114,  114,  114,  114,
      114,  115,  115,  204,  204,  204,  204,  204,  115,  115,
      115,  115,  115,  204,  204,  204,  204,  204,  204,  115,
      115,  115,  115,  115,  117,  117,  204,  204,  204,  204,
      204,  117,  117,  117,  117,  117,  204,  204,  204,  204,
      204,  204,  117,  117,  117,  117,  117,  118,  118,  204,
      204,  204,  204,  204,  118,  118,  118,  118,  118,  204,

      204,  204,  204,  204,  204,  118,  118,  118,  118,  118,
      120,  120,  204,  204,  204,  204,  204,  120,  120,  120,
      120,  120,  204,  204,  204,  204,  204,  204,  120,  120,
      120,  120,  120,  121,  121,  204,  204,  204,  204,  204,
      121,  121,  121,  121,  121,  204,  204,  204,  204,  204,
      204,  121,  121,  121,  121,  121,  123,  123,  204,  204,
      204,  204,  204,  123,  123,  123,  123,  123,  204,  204,
      204,  204,  204,  204,  123,  123,  123,  123,  123,  124,
      124,  204,  204,  204,  204,  204,  124,  124,  124,  124,
      124,  204,  204,  204,  204,  204,  204,  124,  124,  124,

      124,  124,  126,  126,  204,  204,  204,  204,  204,  126,
      126,  126,  126,  126,  204,  204,  204,  204,  204,  204,
      126,  126,  126,  126,  126,  127,  127,  204,  204,  204,
      204,  204,  127,  127,  127,  127,  127,  204,  204,  204,
      204,  204,  204,  127,  127,  127,  127,  127,  129,  129,
      204,  204,  204,  204,  204,  129,  129,  129,  129,  129,
      204,  204,  204,  204,  204,  204,  129,  129,  129,  129,
      129,  130,  130,  204,  204,  204,  204,  204,  130,  130,
      130,  130,  130,  204,  204,  204,  204,  204,  204,  130,
      130,  130,  130,  130,  132,  132,  204,  204,  204,  204,

      204,  132,  132,  132,  132,  132,  204,  204,  204,  204,
      204,  204,  132,  132,  132,  132,  132,  133,  133,  204,
      204,  204,  204,  204,  133,  133,  133,  133,  133,  204,
      204,  204,  204,  204,  204,  133,  133,  133,  133,  133,
      135,  135,  204,  204,  204,  204,  204,  135,  135,  135,
      135,  135,  204,  204,  204,  204,  204,  204,  135,  135,
      135,  135,  135,  136,  136,  204,  204,  204,  204,  204,
      136,  136,  136,  136,  136,  204,  204,  204,  204,  204,
      204,  136,  136,  136,  136,  136,  138,  138,  204,  204,
      204,  204,  204,  138,  138,  138,  138,  138,  204,  204,

      204,  204,  204,  204,  138,  138,  138,  138,  138,  139,
      139,  204,  204,  204,  204,  204,  139,  139,  139,  139,
      139,  204,  204,  204,  204,  204,  204,  139,  139,  139,
      139,  139,  141,  141,  204,  204,  204,  204,  204,  141,
      141,  141,  141,  141,  204,  204,  204,  204,  204,  204,
      141,  141,  141,  141,  141,  142,  142,  204,  204,  204,
      204,  204,  142,  142,  142,  142,  142,  204,  204,  204,
      204,  204,  204,  142,  142,  142,  142,  142,  144,  144,
      204,  204,  204,  204,  204,  144,  144,  144,  144,  144,
      204,  204,  204,  204,  204,  204,  144,  144,  144,  144,

      144,  145,  145,  204,  204,  204,  204,  204,  145,  145,
      145,  145,  145,  204,  204,  204,  204,  204,  204,  145,
      145,  145,  145,  145,  147,  147,  204,  204,  204,  204,
      204,  147,  147,  147,  147,  147,  204,  204,  204,  204,
      204,  204,  147,  147,  147,  147,  147,  148,  148,  204,
      204,  204,  204,  204,  148,  148,  148,  148,  148,  204,
      204,  204,  204,  204,  204,  148,  148,  148,  148,  148,
      150,  150,  204,  204,  204,  204,  204,  150,  150,  150,
      150,  150,  204,  204,  204,  204,  204,  204,  150,  150,
      150,  150,  150,  151,  151,  204,  204,  204,  204,  204,

      151,  151,  151,  151,  151,  204,  204,  204,  204,  204,
      204,  151,  151,  151,  151,  151,  153,  153,  204,  204,
      204,  204,  204,  153,  153,  153,  153,  153,  204,  204,
      204,  204,  204,  204,  153,  153,  153,  153,  153,  154,
      154,  204,  204,  204,  204,  204,  154,  154,  154,  154,
      154,  204,  204,  204,  204,  204,  204,  154,  154,  154,
      154,  154,  156,  156,  204,  204,  204,  204,  204,  156,
      156,  156,  156,  156,  204,  204,  204,  204,  204,  204,
      156,  156,  156,  156,  156,  157,  157,  204,  204,  204,
      204,  204,  157,  157,  157,  157,  157,  204,  204,  204,

      204,  204,  204,  157,  157,  157,  157,  157,  159,  159,
      204,  204,  204,  204,  204,  159,  159,  159,  159,  159,
      204,  204,  204,  204,  204,  204,  159,  159,  159,  159,
      159,  160,  160,  204,  204,  204,  204,  204,  160,  160,
      160,  160,  160,  204,  204,  204,  204,  204,  204,  160,
      160,  160,  160,  160,  162,  162,  204,  204,  204,  204,
      204,  162,  162,  162,  162,  162,  204,  204,  204,  204,
      204,  204,  162,  162,  162,  162,  162,  163,  163,  204,
      204,  204,  204,  204,  163,  163,  163,  163,  163,  204,
      204,  204,  204,  204,  204,  163,  163,  163,  163,  163,

      165,  165,  204,  204,  204,  204,  204,  165,  165,  165,
      165,  165,  204,  204,  204,  204,  204,  204,  165,  165,
      165,  165,  165,  166,  166,  204,  204,  204,  204,  204,
      166,  166,  166,  166,  166,  204,  204,  204,  204,  204,
      204,  166,  166,  166,  166,  166,  168,  168,  204,  204,
      204,  204,  204,  168,  168,  168,  168,  168,  204,  204,
      204,  204,  204,  204,  168,  168,  168,  168,  168,  169,
      169,  204,  204,  204,  204,  204,  169,  169,  169,  169,
      169,  204,  204,  204,  204,  204,  204,  169,  169,  169,
      169,  169,  171,  171,  204,  204,  204,  204,  204,  171,

      171,  171,  171,  171,  204,  204,  204,  204,  204,  204,
      171,  171,  171,  171,  171,  172,  172,  204,  204,  204,
      204,  204,  172,  172,  172,  172,  172,  204,  204,  204,
      204,  204,  204,  172,  172,  172,  172,  172,  174,  174,
      204,  204,  204,  204,  204,  174,  174,  174,  174,  174,
      204,  204,  204,  204,  204,  204,  174,  174,  174,  174,
      174,  175,  175,  204,  204,  204,  204,  204,  175,  175,
      175,  175,  175,  204,  204,  204,  204,  204,  204,  175,
      175,  175,  175,  175,  177,  177,  204,  204,  204,  204,
      204,  177,  177,  177,  177,  177,  204,  204,  204,  204,

      204,  204,  177,  177,  177,  177,  177,  178,  178,  204,
      204,  204,  204,  204,  178,  178,  178,  178,  178,  204,
      204,  204,  204,  204,  204,  178,  178,  178,  178,  178,
      180,  180,  204,  204,  204,  204,  204,  180,  180,  180,
      180,  180,  204,  204,  204,  204,  204,  204,  180,  180,
      180,  180,  180,  182,  182,  204,  204,  204,  204,  204,
      182,  182,  182,  182,  182,  204,  204,  204,  204,  204,
      204,  182,  182,  182,  182,  182,  184,  184,  204,  204,
      204,  204,  204,  184,  184,  184,  184,  184,  204,  204,
      204,  204,  204,  204,  184,  184,  184,  184,  184,  186,

      186,  204,  204,  204,  204,  204,  186,  186,  186,  186,
      186,  204,  204,  204,  204,  204,  204,  186,  186,  186,
      186,  186,  188,  188,  204,  204,  204,  204,  204,  188,
      188,  188,  188,  188,  204,  204,  204,  204,  204,  204,
      188,  188,  188,  188,  188,  190,  190,  204,  204,  204,
      204,  204,  190,  190,  190,  190,  190,  204,  204,  204,
      204,  204,  204,  190,  190,  190,  190,  190,  192,  192,
      204,  204,  204,  204,  204,  192,  192,  192,  192,  192,
      204,  204,  204,  204,  204,  204,  192,  192,  192,  192,
      192,  194,  194,  204,  204,  204,  204,  204,  194,  194,

      194,  194,  194,  204,  204,  204,  204,  204,  204,  194,
      194,  194,  194,  194,  196,  196,  204,  204,  204,  204,
      204,  196,  196,  196,  196,  196,  204,  204,  204,  204,
      204,  204,  196,  196,  196,  196,  196,  198,  198,  204,
      204,  204,  204,  204,  198,  198,  198,  198,  198,  204,
      204,  204,  204,  204,  204,  198,  198,  198,  198,  198,
       14,   14,   14,   14,   14,   26,   26,   26,   26,   26,
       15,   15,   15,   15,   15,   38,  204,   38,   38,   38,
       57,   57,  103,  103,  103,  103,  103,  104,  104,  104,
      104,  104,  116,  116,  119,  119,  122,  122,  125,  125,

      128,  128,  131,  131,  134,  134,  137,  137,  140,  140,
      143,  143,  146,  146,  149,  149,  152,  152,  155,  155,
      158,  158,  161,  161,  164,  164,  167,  167,  170,  170,
      173,  173,  176,  176,  179,  179,  181,  181,  183,  183,
      185,  185,  187,  187,  189,  189,  191,  191,  193,  193,
      195,  195,  197,  197,  199,  199,   13,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204

    } ;

static yyconst short int yy_chk[1998] =
    {   0,
        0,    1,    1,    1,    1,    0,    1,    9,    9,    9,
       27,   27,    1,    1,    1,    1,    1,    9,    9,    9,
       29,   29,  201,    1,    1,   32,   32,   10,   10,   10,
        1,    2,    2,    2,    2,  200,    2,   10,   10,   10,
       36,   36,    2,    2,    2,    2,    2,   45,   61,   61,
       68,   68,  199,    2,    2,   53,    3,   45,    3,    3,
        2,    3,    3,    3,    4,   53,    4,    4,  198,    4,
        4,    4,    5,   85,    5,    5,   85,    5,    5,    5,
        6,  104,    6,    6,   99,    6,    6,    6,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,   11,   97,
       11,   11,   95,   11,   11,   11,   12,   93,   12,   12,
       91,   12,   12,   12,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   28,   89,   28,   28,
       47,   47,   56,   56,   47,   47,   56,   56,   59,   28,
       52,   87,   52,   52,   77,   58,   58,   66,   59,   28,
       43,   28,   41,   52,   40,   28,   58,   28,   33,   31,
       33,   33,   25,   52,   71,   71,   58,   24,   33,   58,

       23,   33,   33,   22,   58,   74,   74,   74,   13,   33,
        0,   33,    0,   33,    0,   69,   69,   33,    0,   33,
       37,    0,   37,   37,   37,   62,   62,   67,   67,   62,
       62,   67,   67,   37,    0,   70,   70,    0,   69,   70,
       70,    0,   69,   37,   69,    0,   37,   72,   72,   75,
       75,   37,   44,   44,    0,   73,   73,    0,   72,   73,
       73,   76,   76,   44,   78,   78,   79,   79,   72,   80,
       80,   81,   81,   44,    0,   44,   82,   82,    0,   44,
        0,   44,   83,   83,    0,   76,   84,   84,    0,   79,
       76,   86,   86,   79,    0,   79,  106,  106,  107,  107,

        0,    0,    0,    0,    0,    0,   83,  109,  109,  110,
      110,   83,   88,   88,    0,    0,    0,    0,    0,   88,
       88,   88,   88,   88,    0,    0,    0,    0,    0,    0,
       88,   88,   88,   88,   88,   90,   90,  109,    0,  110,
        0,    0,   90,   90,   90,   90,   90,    0,    0,    0,
        0,    0,    0,   90,   90,   90,   90,   90,   92,   92,
        0,    0,    0,    0,    0,   92,   92,   92,   92,   92,
        0,    0,    0,    0,    0,    0,   92,   92,   92,   92,
       92,   94,   94,    0,    0,    0,    0,    0,   94,   94,
       94,   94,   94,    0,    0,    0,    0,    0,    0,   94,

       94,   94,   94,   94,   96,   96,    0,    0,    0,    0,
        0,   96,   96,   96,   96,   96,    0,    0,    0,    0,
        0,    0,   96,   96,   96,   96,   96,   98,   98,    0,
        0,    0,    0,    0,   98,   98,   98,   98,   98,    0,
        0,    0,    0,    0,    0,   98,   98,   98,   98,   98,
      100,  100,    0,    0,    0,    0,    0,  100,  100,  100,
      100,  100,    0,    0,    0,    0,    0,    0,  100,  100,
      100,  100,  100,  101,  101,  101,    0,    0,    0,    0,
        0,    0,    0,  101,  101,  101,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      101,  102,  102,    0,    0,    0,    0,    0,  102,  102,
      102,  102,  102,    0,    0,    0,    0,    0,    0,  102,
      102,  102,  102,  102,  103,  103,  103,    0,    0,    0,
        0,    0,    0,    0,  103,  103,  103,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  103,  105,  105,    0,    0,    0,    0,    0,  105,
      105,  105,  105,  105,    0,    0,    0,    0,    0,    0,
      105,  105,  105,  105,  105,  108,  108,    0,    0,    0,

        0,    0,  108,  108,  108,  108,  108,    0,    0,    0,
        0,    0,    0,  108,  108,  108,  108,  108,  111,  111,
        0,    0,    0,    0,    0,  111,  111,  111,  111,  111,
        0,    0,    0,    0,    0,    0,  111,  111,  111,  111,
      111,  112,  112,    0,    0,    0,    0,    0,  112,  112,
      112,  112,  112,    0,    0,    0,    0,    0,    0,  112,
      112,  112,  112,  112,  114,  114,    0,    0,    0,    0,
        0,  114,  114,  114,  114,  114,    0,    0,    0,    0,
        0,    0,  114,  114,  114,  114,  114,  115,  115,    0,
        0,    0,    0,    0,  115,  115,  115,  115,  115,    0,

        0,    0,    0,    0,    0,  115,  115,  115,  115,  115,
      117,  117,    0,    0,    0,    0,    0,  117,  117,  117,
      117,  117,    0,    0,    0,    0,    0,    0,  117,  117,
      117,  117,  117,  118,  118,    0,    0,    0,    0,    0,
      118,  118,  118,  118,  118,    0,    0,    0,    0,    0,
        0,  118,  118,  118,  118,  118,  120,  120,    0,    0,
        0,    0,    0,  120,  120,  120,  120,  120,    0,    0,
        0,    0,    0,    0,  120,  120,  120,  120,  120,  121,
      121,    0,    0,    0,    0,    0,  121,  121,  121,  121,
      121,    0,    0,    0,    0,    0,    0,  121,  121,  121,

      121,  121,  123,  123,    0,    0,    0,    0,    0,  123,
      123,  123,  123,  123,    0,    0,    0,    0,    0,    0,
      123,  123,  123,  123,  123,  124,  124,    0,    0,    0,
        0,    0,  124,  124,  124,  124,  124,    0,    0,    0,
        0,    0,    0,  124,  124,  124,  124,  124,  126,  126,
        0,    0,    0,    0,    0,  126,  126,  126,  126,  126,
        0,    0,    0,    0,    0,    0,  126,  126,  126,  126,
      126,  127,  127,    0,    0,    0,    0,    0,  127,  127,
      127,  127,  127,    0,    0,    0,    0,    0,    0,  127,
      127,  127,  127,  127,  129,  129,    0,    0,    0,    0,

        0,  129,  129,  129,  129,  129,    0,    0,    0,    0,
        0,    0,  129,  129,  129,  129,  129,  130,  130,    0,
        0,    0,    0,    0,  130,  130,  130,  130,  130,    0,
        0,    0,    0,    0,    0,  130,  130,  130,  130,  130,
      132,  132,    0,    0,    0,    0,    0,  132,  132,  132,
      132,  132,    0,    0,    0,    0,    0,    0,  132,  132,
      132,  132,  132,  133,  133,    0,    0,    0,    0,    0,
      133,  133,  133,  133,  133,    0,    0,    0,    0,    0,
        0,  133,  133,  133,  133,  133,  135,  135,    0,    0,
        0,    0,    0,  135,  135,  135,  135,  135,    0,    0,

        0,    0,    0,    0,  135,  135,  135,  135,  135,  136,
      136,    0,    0,    0,    0,    0,  136,  136,  136,  136,
      136,    0,    0,    0,    0,    0,    0,  136,  136,  136,
      136,  136,  138,  138,    0,    0,    0,    0,    0,  138,
      138,  138,  138,  138,    0,    0,    0,    0,    0,    0,
      138,  138,  138,  138,  138,  139,  139,    0,    0,    0,
        0,    0,  139,  139,  139,  139,  139,    0,    0,    0,
        0,    0,    0,  139,  139,  139,  139,  139,  141,  141,
        0,    0,    0,    0,    0,  141,  141,  141,  141,  141,
        0,    0,    0,    0,    0,    0,  141,  141,  141,  141,

      141,  142,  142,    0,    0,    0,    0,    0,  142,  142,
      142,  142,  142,    0,    0,    0,    0,    0,    0,  142,
      142,  142,  142,  142,  144,  144,    0,    0,    0,    0,
        0,  144,  144,  144,  144,  144,    0,    0,    0,    0,
        0,    0,  144,  144,  144,  144,  144,  145,  145,    0,
        0,    0,    0,    0,  145,  145,  145,  145,  145,    0,
        0,    0,    0,    0,    0,  145,  145,  145,  145,  145,
      147,  147,    0,    0,    0,    0,    0,  147,  147,  147,
      147,  147,    0,    0,    0,    0,    0,    0,  147,  147,
      147,  147,  147,  148,  148,    0,    0,    0,    0,    0,

      148,  148,  148,  148,  148,    0,    0,    0,    0,    0,
        0,  148,  148,  148,  148,  148,  150,  150,    0,    0,
        0,    0,    0,  150,  150,  150,  150,  150,    0,    0,
        0,    0,    0,    0,  150,  150,  150,  150,  150,  151,
      151,    0,    0,    0,    0,    0,  151,  151,  151,  151,
      151,    0,    0,    0,    0,    0,    0,  151,  151,  151,
      151,  151,  153,  153,    0,    0,    0,    0,    0,  153,
      153,  153,  153,  153,    0,    0,    0,    0,    0,    0,
      153,  153,  153,  153,  153,  154,  154,    0,    0,    0,
        0,    0,  154,  154,  154,  154,  154,    0,    0,    0,

        0,    0,    0,  154,  154,  154,  154,  154,  156,  156,
        0,    0,    0,    0,    0,  156,  156,  156,  156,  156,
        0,    0,    0,    0,    0,    0,  156,  156,  156,  156,
      156,  157,  157,    0,    0,    0,    0,    0,  157,  157,
      157,  157,  157,    0,    0,    0,    0,    0,    0,  157,
      157,  157,  157,  157,  159,  159,    0,    0,    0,    0,
        0,  159,  159,  159,  159,  159,    0,    0,    0,    0,
        0,    0,  159,  159,  159,  159,  159,  160,  160,    0,
        0,    0,    0,    0,  160,  160,  160,  160,  160,    0,
        0,    0,    0,    0,    0,  160,  160,  160,  160,  160,

      162,  162,    0,    0,    0,    0,    0,  162,  162,  162,
      162,  162,    0,    0,    0,    0,    0,    0,  162,  162,
      162,  162,  162,  163,  163,    0,    0,    0,    0,    0,
      163,  163,  163,  163,  163,    0,    0,    0,    0,    0,
        0,  163,  163,  163,  163,  163,  165,  165,    0,    0,
        0,    0,    0,  165,  165,  165,  165,  165,    0,    0,
        0,    0,    0,    0,  165,  165,  165,  165,  165,  166,
      166,    0,    0,    0,    0,    0,  166,  166,  166,  166,
      166,    0,    0,    0,    0,    0,    0,  166,  166,  166,
      166,  166,  168,  168,    0,    0,    0,    0,    0,  168,

      168,  168,  168,  168,    0,    0,    0,    0,    0,    0,
      168,  168,  168,  168,  168,  169,  169,    0,    0,    0,
        0,    0,  169,  169,  169,  169,  169,    0,    0,    0,
        0,    0,    0,  169,  169,  169,  169,  169,  171,  171,
        0,    0,    0,    0,    0,  171,  171,  171,  171,  171,
        0,    0,    0,    0,    0,    0,  171,  171,  171,  171,
      171,  172,  172,    0,    0,    0,    0,    0,  172,  172,
      172,  172,  172,    0,    0,    0,    0,    0,    0,  172,
      172,  172,  172,  172,  174,  174,    0,    0,    0,    0,
        0,  174,  174,  174,  174,  174,    0,    0,    0,    0,

        0,    0,  174,  174,  174,  174,  174,  175,  175,    0,
        0,    0,    0,    0,  175,  175,  175,  175,  175,    0,
        0,    0,    0,    0,    0,  175,  175,  175,  175,  175,
      178,  178,    0,    0,    0,    0,    0,  178,  178,  178,
      178,  178,    0,    0,    0,    0,    0,    0,  178,  178,
      178,  178,  178,  180,  180,    0,    0,    0,    0,    0,
      180,  180,  180,  180,  180,    0,    0,    0,    0,    0,
        0,  180,  180,  180,  180,  180,  182,  182,    0,    0,
        0,    0,    0,  182,  182,  182,  182,  182,    0,    0,
        0,    0,    0,    0,  182,  182,  182,  182,  182,  184,

      184,    0,    0,    0,    0,    0,  184,  184,  184,  184,
      184,    0,    0,    0,    0,    0,    0,  184,  184,  184,
      184,  184,  186,  186,    0,    0,    0,    0,    0,  186,
      186,  186,  186,  186,    0,    0,    0,    0,    0,    0,
      186,  186,  186,  186,  186,  188,  188,    0,    0,    0,
        0,    0,  188,  188,  188,  188,  188,    0,    0,    0,
        0,    0,    0,  188,  188,  188,  188,  188,  190,  190,
        0,    0,    0,    0,    0,  190,  190,  190,  190,  190,
        0,    0,    0,    0,    0,    0,  190,  190,  190,  190,
      190,  192,  192,    0,    0,    0,    0,    0,  192,  192,

      192,  192,  192,    0,    0,    0,    0,    0,    0,  192,
      192,  192,  192,  192,  194,  194,    0,    0,    0,    0,
        0,  194,  194,  194,  194,  194,    0,    0,    0,    0,
        0,    0,  194,  194,  194,  194,  194,  196,  196,    0,
        0,    0,    0,    0,  196,  196,  196,  196,  196,    0,
        0,    0,    0,    0,    0,  196,  196,  196,  196,  196,
      205,  205,  205,  205,  205,  206,  206,  206,  206,  206,
      207,  207,  207,  207,  207,  208,    0,  208,  208,  208,
      209,  209,  210,  210,  210,  210,  210,  211,  211,  211,
      211,  211,  212,  212,  213,  213,  214,  214,  215,  215,

      216,  216,  217,  217,  218,  218,  219,  219,  220,  220,
      221,  221,  222,  222,  223,  223,  224,  224,  225,  225,
      226,  226,  227,  227,  228,  228,  229,  229,  230,  230,
      231,  231,  232,  232,  233,  233,  234,  234,  235,  235,
      236,  236,  237,  237,  238,  238,  239,  239,  240,  240,
      241,  241,  242,  242,  243,  243,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204

    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
#include "../../QuickSearch/stdafx.h"
#include "resource.h"
#include <io.h>
/*#include "OtherFunctions.h"*/
#include "../comm/commFun.h"
/*#include "SearchExpr.h"*/
#include "scanner.h"
/*#include "parser.hpp"*/
/*#include "ED2KLink.h"*/
/*#include "StringConversion.h"*/

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#define YY_NEVER_INTERACTIVE 1

extern int yyerror(LPCTSTR errstr)
{
	return 0;
}
extern int yyerrorf(LPCTSTR errstr, ...)
{
	return 0;
}
extern CStringA StrToUtf8(const CString& rstr);

#define	ECHO				TRACE
#define	YY_INPUT			ReadLexBuff
#define	YY_FATAL_ERROR		FatalLexError

static void ReadLexBuff(char* pcBuff, int& riResult, size_t uMaxSize);
static void FatalLexError(yyconst char msg[]);
int opt_strnicmp(const char* pszString, const char* pszMatch, size_t nMinMatch);

static CStringA _strInputBuff;
static LPCSTR _pszLexBuff;
static bool _bKeepQuotedStrings;

#pragma warning(disable:4127) // conditional expression is constant
#pragma warning(disable:4244) // conversion from 'type1' to 'type2', possible loss of data
/* Reject some special characters for 'keywords'
 *
 * SPACE	obvious
 * ( and )	obvious
 * "		quoted string
 * <		comparison operator
 * >		comparison operator
 * =		comparison operator
 *
 * The '@' character does not need to be rejected because:
 *	- it is allowed only at the start of a meta-id (e.g. @size)
 *  - all terminals which are allowed to preceede a meta-id and which are allowed
 *    to follow a meta-id are already rejected (e.g. (a)@size>1). This way we can
 *    still allow keywords which include a '@' character (e.g. fr@nk)
 */
#define NUMBER 1

#define SIZE 2

#define TYPE 3

#define STRING 4

#define LENGTH 5


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;




	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 205 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1957 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{ /* Skip blanks. */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
{ /*return TOK_OR; */return 0;}
	YY_BREAK
case 3:
YY_RULE_SETUP
{/* return TOK_AND;*/ return 0;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{/* return TOK_NOT; */return 0;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
					if (opt_strnicmp(yytext+1, "size", 3) == 0) {
						BEGIN(SIZE);
						//return TOK_SIZE;
						return 0;
					}
					else if (opt_strnicmp(yytext+1, "type", 3) == 0) {
						BEGIN(TYPE);
						//return TOK_TYPE; 
						return 0;
					}
					else if (opt_strnicmp(yytext+1, "ext", 3) == 0) {
						BEGIN(STRING);
						//return TOK_EXT;
						return 0;
					}
					else if (opt_strnicmp(yytext+1, "availability", 3) == 0 || 
						     opt_strnicmp(yytext+1, "sources", 3) == 0) {
						BEGIN(NUMBER);
						//return TOK_SOURCES; 
						return 0;
					}
					else if (opt_strnicmp(yytext+1, "complete", 3) == 0) {
						BEGIN(NUMBER);
						//return TOK_COMPLETE; 
						return 0;
					}
					else if (opt_strnicmp(yytext+1, "bitrate", 3) == 0) {
						BEGIN(NUMBER);
						//return TOK_BITRATE; 
						return 0;
					}
					else if (opt_strnicmp(yytext+1, "length", 3) == 0) {
						//BEGIN(LENGTH);
						//return TOK_LENGTH; 
						return 0;
					}
					else if (opt_strnicmp(yytext+1, "codec", 3) == 0) {
						//BEGIN(STRING);
						//return TOK_CODEC; 
						return 0;
					}
					else if (opt_strnicmp(yytext+1, "rating", 3) == 0) {
						//BEGIN(NUMBER);
						//return TOK_RATING; 
						return 0;
					}
					else if (opt_strnicmp(yytext+1, "title", 3) == 0) {
						BEGIN(STRING);
						//return TOK_TITLE; 
						return 0;
					}
					else if (opt_strnicmp(yytext+1, "album", 3) == 0) {
						BEGIN(STRING);
						//return TOK_ALBUM; 
						return 0;
					}
					else if (opt_strnicmp(yytext+1, "artist", 3) == 0) {
						BEGIN(STRING);
						//return TOK_ARTIST; 
						return 0;
					}
					yyerrorf(_T("UNKATTR ERR"), OptUtf8ToStr(yytext));
					yyterminate();
					/*NOT REACHED*/
				}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ /*return*/ /*TOK_OPR_EQ;*/return 0; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ /*return*/ /*TOK_OPR_GT; */return 0;}
	YY_BREAK
case 8:
YY_RULE_SETUP
{ /*return*//* TOK_OPR_LT;*/ return 0;}
	YY_BREAK
case 9:
YY_RULE_SETUP
{ /*return*/ /*TOK_OPR_GE; */return 0;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ /*return*/ /*TOK_OPR_LE; */return 0;}
	YY_BREAK
case 11:
YY_RULE_SETUP
{ /*return*/ /*TOK_OPR_NE;*/return 0; }
	YY_BREAK
case 12:
YY_RULE_SETUP
{
// 					CString strError;
// 					try
// 					{
// 						USES_CONVERSION;
// 						CED2KLink* pLink = CED2KLink::CreateLinkFromUrl(A2T(yytext));
// 						if (pLink && pLink->GetKind() == CED2KLink::kFile)
// 						{
// 							CED2KFileLink* pFileLink = pLink->GetFileLink();
// 							if (pFileLink)
// 							{
// 								yylval.pstr = new CStringA;
// 								yylval.pstr->Format("ed2k::%s", md4strA(pFileLink->GetHashKey()));
// 								delete pLink;
// 								return TOK_ED2K_LINK;
// 							}
// 						}
// 						delete pLink;
// 					}
// 					catch(CString strEd2kLinkError)
// 					{
// 						strError = strEd2kLinkError;
// 					}
// 					if (strError.IsEmpty())
// 						strError = GetResString(IDS_ERR_BADED2KLINK);
// 					yyerror(strError);
// 					yyterminate();
					/*NOT REACHED*/
				}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
// 					yylval.pstr = new CStringA(yytext);
// 					return TOK_ED2K_LINK;
	return 0;
				}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
					BEGIN(INITIAL);
					char* endptr = NULL;
					double dbl = strtod(yytext, &endptr);
					if (endptr) {
						if (*endptr == 'k')
							dbl *= 1000;
						else if (*endptr == 'm')
							dbl *= 1000*1000;
						else if (*endptr == 'g')
							dbl *= 1000*1000*1000;
					}
				//	yylval.num = (uint64)(dbl + 0.5);
					//return TOK_NUMBER;
					return 0;
				}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
					BEGIN(INITIAL);
					char* endptr = NULL;
					double dbl = strtod(yytext, &endptr);
					if (endptr) {
						if (*endptr == 'B' || *endptr == 'b')
							;
						else if (*endptr == 'K' || *endptr == 'k')
							dbl *= 1024;
						else if (*endptr == 'M' || *endptr == 'm')
							dbl *= 1024*1024;
						else if (*endptr == 'G' || *endptr == 'g')
							dbl *= 1024*1024*1024;
						else
							dbl *= 1024*1024;
					}
					else {
						dbl *= 1024*1024;
					}
					//yylval.num = (uint64)(dbl + 0.5);
					//return TOK_NUMBER;
					return 0;
				}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
					BEGIN(INITIAL);
					char* endptr = NULL;
					double dbl = strtod(yytext, &endptr);
					if (endptr) {
						if (*endptr == 's')
							;
						else if (*endptr == 'm')
							dbl *= 60;
						else if (*endptr == 'h')
							dbl *= 60*60;
					}
				//	yylval.num = (uint64)(dbl + 0.5);
					//return TOK_NUMBER;
					return 0;
				}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
// 					BEGIN(INITIAL);
// 					UINT m, s;
// 					if (sscanf(yytext, "%u:%u", &m, &s) != 2) {
// 						yyerrorf(GetResString(IDS_SEARCH_ATTRERR), _T("@length"));
// 						yyterminate();
// 						/*NOT REACHED*/
// 					}
// 					yylval.num = s + m*60;
// 					return TOK_NUMBER;
	return 0;
				}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
// 					BEGIN(INITIAL);
// 					UINT h, m, s;
// 					if (sscanf(yytext, "%u:%u:%u", &h, &m, &s) != 3) {
// 						yyerrorf(GetResString(IDS_SEARCH_ATTRERR), _T("@length"));
// 						yyterminate();
// 						/*NOT REACHED*/
// 					}
// 					yylval.num = s + m*60 + h*60*60;
// 					return TOK_NUMBER;
	return 0;
				}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
					BEGIN(INITIAL);
					if (opt_strnicmp(yytext, "audio", 3) == 0)
					{
						//yylval.pstr = new CStringA(ED2KFTSTR_AUDIO);
						//return TOK_TYPEVAL;
						return 0;
					}
					else if (opt_strnicmp(yytext, "video", 3) == 0)
					{
					//	yylval.pstr = new CStringA(ED2KFTSTR_VIDEO);
					//	return TOK_TYPEVAL;
						return 0;
					}
					else if (opt_strnicmp(yytext, "image", 3) == 0 || stricmp(yytext, "img") == 0)
					{
					//	yylval.pstr = new CStringA(ED2KFTSTR_IMAGE);
					//	return TOK_TYPEVAL;
						return 0;
					}
					else if (opt_strnicmp(yytext, "document", 3) == 0)
					{
					//	yylval.pstr = new CStringA(ED2KFTSTR_DOCUMENT);
					//	return TOK_TYPEVAL;
						return 0;
					}
					else if (opt_strnicmp(yytext, "program", 3) == 0)
					{
						//yylval.pstr = new CStringA(ED2KFTSTR_PROGRAM);
						//return TOK_TYPEVAL;
						return 0;
					}
					else if (opt_strnicmp(yytext, "archive", 3) == 0)
					{
						//yylval.pstr = new CStringA(ED2KFTSTR_ARCHIVE);
						//return TOK_TYPEVAL;
						return 0;
					}
					else if (stricmp(yytext, "iso") == 0 || stricmp(yytext, "cd") == 0)
					{
						//yylval.pstr = new CStringA(ED2KFTSTR_CDIMAGE);
						//return TOK_TYPEVAL;
						return 0;
					}
					yyerrorf(_T("SEARCH_ATTRERR"), _T("@type"));
					yyterminate();
					/*NOT REACHED*/
				}
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return 0; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{
					if (YYSTATE == INITIAL)
					{
					    /* Strings prefixed with '-' are to be handled with a different rule, reject it and let
					     * the scanner find the next best rule. */
					    if (yytext[0] == '-') {
						    REJECT;
						    /*NOT REACHED*/
					    }
    
					    /* Strings prefixed with '@' are treated as 'invalid' meta-tag id. Otherwise they would be
					     * silently used as string terms -> a typo would not be noticed by the user */
					    if (yytext[0] == '@') {
							//yyerrorf(GetResString(IDS_SEARCH_UNKATTR), OptUtf8ToStr(yytext));
							yyerrorf(_T("SEARCH_UNKATTR"), OptUtf8ToStr(yytext));
						    yyterminate();
						    /*NOT REACHED*/
					    }
					}
					else if (YYSTATE == STRING)
						BEGIN(INITIAL);
				//	yylval.pstr = new CStringA(yytext);
					return 0;
                }
	YY_BREAK
case 22:
YY_RULE_SETUP
{
					int l = 128;
					char* psz = (char*)malloc(l);
					int i = 0;
					int c;
					while ((c = yyinput()) != '\"')
					{
						if (c == EOF || c == '\n'){
							unput(c);
							yyerror(_T("ERROR"));
							yyterminate();
							/*NOT REACHED*/
							break;
						}
						if (c == '\\'){		/*Escape sequence*/
							switch (c = yyinput())
							{
							case '\n':
								continue;
							case 't':		/*Tab*/
								c = '\t';
								break;
							case 'n':		/*Linefeed*/
								c = '\n';
								break;
							case 'f':		/*Formfeed*/
								c = '\f';
								break;
							case 'r':		/*Carriage return*/
								c = '\r';
								break;
							case '\\':		/*Backslash*/
								c = '\\';
								break;
							case '"':		/*Double quotation mark*/
								c = '\"';
								break;
							case '\'':		/*Single quotation mark*/
								c = '\'';
								break;
							case '?':		/*Question mark*/
								c = '\?';
								break;
							case 'v':		/*Vertical Tab*/
								c = '\v';
								break;
							case 'a':		/*Alert*/
								c = '\a';
								break;
							case 'b':		/*Backspace*/
								c = '\b';
								break;
							case 'x':		/*Hexadecimal number*/
								{
									int n, octv;
									for (n = 1, octv = 0; n <= 3; n++) {
										if ((c = yyinput()) >= '0' && c <= '9')
											c -= '0';
										else if (c >= 'a' && c <= 'f')
											c = (c - 'a') + 10;
										else if (c >= 'A' && c <= 'F')
											c = (c - 'A') + 10;
										else
											break;
										octv = octv * 16 + c;
									}
									unput(c);
									if (n == 1)
										c = 'x';
									else
										c = octv;
								}
								break;
							}
						}
#ifndef _UNICODE
						else{
							if ((unsigned char)c >= 0x80 && IsDBCSLeadByte(yytext[0])){
								psz[i++] = (unsigned char)c;
								if (i >= l){
									psz = (char*)realloc(psz, l += 128);
									if (psz == NULL){
										yyerror(_T("Less memory for string"));
										yyterminate();
										/*NOT REACHED*/
										break;
									}
								}
								c = yyinput();
							}
						}
#endif

						psz[i++] = (unsigned char)c;
						if (i >= l){
							psz = (char*)realloc(psz, l += 128);
							if (psz == NULL){
								yyerror(_T("Less memory for string"));
								yyterminate();
								/*NOT REACHED*/
								break;
							}
						}
					}
					psz[i] = '\0';
					
					if (_bKeepQuotedStrings && YYSTATE != STRING) {
						CStringA quoted;
						quoted = '\"';
						quoted += psz;
						quoted += '\"';
					//	yylval.pstr = new CStringA(quoted);
					}
					//else
					//	yylval.pstr = new CStringA(psz);
					//free(psz);

					BEGIN(INITIAL);

					// Do not return empty strings, and also do not return quoted empty strings
					//if (!yylval.pstr->IsEmpty() && *yylval.pstr != "\"\"")
					//	return 0;

					//delete yylval.pstr;
				}
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return yytext[0]; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(NUMBER):
case YY_STATE_EOF(SIZE):
case YY_STATE_EOF(TYPE):
case YY_STATE_EOF(STRING):
case YY_STATE_EOF(LENGTH):
{ return 0; }
	YY_BREAK
case 24:
YY_RULE_SETUP
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 205 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 205 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 204);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef _WIN32
#include <unistd.h>
#else
#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif


#pragma warning(default:4127) // conditional expression is constant
#pragma warning(default:4244) // conversion from 'type1' to 'type2', possible loss of data

static void ReadLexBuff(char* pcBuff, int& riResult, size_t uMaxSize)
{
	ASSERT( _pszLexBuff != NULL );
	if (_pszLexBuff == NULL)
		YY_FATAL_ERROR("Input in flex scanner failed");

	ASSERT( sizeof(YY_CHAR) == sizeof(char) );
	size_t uCharsInBuff = strlen(_pszLexBuff);
	size_t uCharsRead = min(uMaxSize, uCharsInBuff);
	riResult = uCharsRead;
	memcpy(pcBuff, _pszLexBuff, uCharsRead);
	_pszLexBuff += uCharsRead;
}

static void FatalLexError(yyconst char msg[])
{
#ifdef _CONSOLE
	printf("Fatal error in flex scanner: %s\n", msg);
#else
	USES_CONVERSION;
	AfxMessageBox(CString(_T("Fatal error in flex scanner: ")) + A2CT(msg), MB_ICONSTOP);
#endif
}

void LexInit(LPCTSTR pszInput, bool bKeepQuotedStrings)
{
	_strInputBuff = StrToUtf8(pszInput);
	_pszLexBuff = (LPCSTR)_strInputBuff;
	_bKeepQuotedStrings = bKeepQuotedStrings;
}

void LexFree()
{
	yytext = NULL;
	yyleng = 0;
	yyin = NULL;
	yyout = NULL;
	yy_delete_buffer(yy_current_buffer);
	yy_hold_char = '\0';
	yy_n_chars = 0;
	yy_c_buf_p = NULL;
	yy_init = 1;
	yy_start = 0;
	yy_did_buffer_switch_on_eof = 0;
#ifndef REJECT
	yy_last_accepting_state = 0;
	yy_last_accepting_cpos = NULL;
#endif
#if YY_STACK_USED
	yy_start_stack_ptr = 0;
	yy_start_stack_depth = 0;
	yy_start_stack = NULL;
#endif
	_strInputBuff.Empty();
	_pszLexBuff = NULL;
}

int opt_strnicmp(const char* pszString, const char* pszMatch, size_t nMinMatch)
{
	size_t nStringLen = strlen(pszString);
	if (nStringLen < nMinMatch)
		return -1;
	size_t nMatchLen = strlen(pszMatch);
	ASSERT( nMatchLen >= nMinMatch );
	if (nStringLen > nMatchLen)
		return 1;
	return strnicmp(pszString, pszMatch, nStringLen);
}
